
gamecontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000111e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00802000  0000111e  000011b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00802032  00802032  000011e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001a0  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000192a  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082f  00000000  00000000  00002d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000169c  00000000  00000000  00003539  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003d8  00000000  00000000  00004bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001176c  00000000  00000000  00004fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000639  00000000  00000000  0001671c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  00016d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000057e4  00000000  00000000  00016e95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__ctors_end>
       4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
       c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      10:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      14:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      18:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      1c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      20:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      24:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      28:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      2c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      30:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      38:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      3c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      44:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      50:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      54:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      58:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      5c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      60:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      64:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      68:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      6c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      70:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      74:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      78:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      7c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      80:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      84:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      88:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      8c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      90:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      94:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      98:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      9c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      a8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      ac:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      b8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      bc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      c8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      cc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      d8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      dc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      e8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      ec:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f0:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f4:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      f8:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
      fc:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     100:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     104:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     108:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     10c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     110:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     118:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     11c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     120:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     124:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     128:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     12c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     130:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     134:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     138:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     13c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     140:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     144:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     148:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     14c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     150:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     154:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     158:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     15c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     160:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     164:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>
     168:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__bad_interrupt>

0000016c <__ctors_end>:
     16c:	11 24       	eor	r1, r1
     16e:	1f be       	out	0x3f, r1	; 63
     170:	cf ef       	ldi	r28, 0xFF	; 255
     172:	cd bf       	out	0x3d, r28	; 61
     174:	d7 e2       	ldi	r29, 0x27	; 39
     176:	de bf       	out	0x3e, r29	; 62

00000178 <__do_copy_data>:
     178:	10 e2       	ldi	r17, 0x20	; 32
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b0 e2       	ldi	r27, 0x20	; 32
     17e:	ee e1       	ldi	r30, 0x1E	; 30
     180:	f1 e1       	ldi	r31, 0x11	; 17
     182:	02 c0       	rjmp	.+4      	; 0x188 <__do_copy_data+0x10>
     184:	05 90       	lpm	r0, Z+
     186:	0d 92       	st	X+, r0
     188:	a2 33       	cpi	r26, 0x32	; 50
     18a:	b1 07       	cpc	r27, r17
     18c:	d9 f7       	brne	.-10     	; 0x184 <__do_copy_data+0xc>

0000018e <__do_clear_bss>:
     18e:	20 e2       	ldi	r18, 0x20	; 32
     190:	a2 e3       	ldi	r26, 0x32	; 50
     192:	b0 e2       	ldi	r27, 0x20	; 32
     194:	01 c0       	rjmp	.+2      	; 0x198 <.do_clear_bss_start>

00000196 <.do_clear_bss_loop>:
     196:	1d 92       	st	X+, r1

00000198 <.do_clear_bss_start>:
     198:	aa 33       	cpi	r26, 0x3A	; 58
     19a:	b2 07       	cpc	r27, r18
     19c:	e1 f7       	brne	.-8      	; 0x196 <.do_clear_bss_loop>
     19e:	0e 94 9e 02 	call	0x53c	; 0x53c <main>
     1a2:	0c 94 8d 08 	jmp	0x111a	; 0x111a <_exit>

000001a6 <__bad_interrupt>:
     1a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001aa <AccInit>:
#define CALL_OFFSET_Y 945
#define SCALE_FACTOR_Z 1600
#define CALL_OFFSET_Z 1120

void AccInit(void)
{
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
		AnalogInit();
     1b2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <AnalogInit>
		//uit slaapmodus halen :  By placing a high input signal on pin 6 of acc, the device will resume to normal mode of operation.
		// --> ACC-sleep : PC6
		
		//set sleep pin of accelerometer
		PORTC.OUT |= 0b01000000;			//set PC6 high		//of |= PIN6_bm
     1b6:	80 e4       	ldi	r24, 0x40	; 64
     1b8:	96 e0       	ldi	r25, 0x06	; 6
     1ba:	20 e4       	ldi	r18, 0x40	; 64
     1bc:	36 e0       	ldi	r19, 0x06	; 6
     1be:	f9 01       	movw	r30, r18
     1c0:	24 81       	ldd	r18, Z+4	; 0x04
     1c2:	20 64       	ori	r18, 0x40	; 64
     1c4:	fc 01       	movw	r30, r24
     1c6:	24 83       	std	Z+4, r18	; 0x04
		PORTC.DIRSET = 0b01000000;		//set PC6 as output (output = 1, input = 0S) ---- 0x40
     1c8:	80 e4       	ldi	r24, 0x40	; 64
     1ca:	96 e0       	ldi	r25, 0x06	; 6
     1cc:	20 e4       	ldi	r18, 0x40	; 64
     1ce:	fc 01       	movw	r30, r24
     1d0:	21 83       	std	Z+1, r18	; 0x01
			
}
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	08 95       	ret

000001d8 <AccGetXAxisRaw>:
unsigned int AccGetXAxisRaw(void)
{
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
	//gebruik maken van de AnalogGetCh() methode
	return AnalogGetCh(0, 4);
     1e0:	64 e0       	ldi	r22, 0x04	; 4
     1e2:	70 e0       	ldi	r23, 0x00	; 0
     1e4:	80 e0       	ldi	r24, 0x00	; 0
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 08 02 	call	0x410	; 0x410 <AnalogGetCh>
}
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	08 95       	ret

000001f2 <AccGetYAxisRaw>:
unsigned int AccGetYAxisRaw(void)
{
     1f2:	cf 93       	push	r28
     1f4:	df 93       	push	r29
     1f6:	cd b7       	in	r28, 0x3d	; 61
     1f8:	de b7       	in	r29, 0x3e	; 62
	//gebruik maken van de AnalogGetCh() methode
	return AnalogGetCh(1, 4);
     1fa:	64 e0       	ldi	r22, 0x04	; 4
     1fc:	70 e0       	ldi	r23, 0x00	; 0
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 08 02 	call	0x410	; 0x410 <AnalogGetCh>
}
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <AccGetZAxisRaw>:
unsigned int AccGetZAxisRaw(void)
{
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
	//gebruik maken van de AnalogGetCh() methode
	return AnalogGetCh(2, 4);
     214:	64 e0       	ldi	r22, 0x04	; 4
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	82 e0       	ldi	r24, 0x02	; 2
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 08 02 	call	0x410	; 0x410 <AnalogGetCh>
}
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	08 95       	ret

00000226 <AccGetXAxis>:

int AccGetXAxis(unsigned int AccRaw)
{
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	cd b7       	in	r28, 0x3d	; 61
     22c:	de b7       	in	r29, 0x3e	; 62
     22e:	2a 97       	sbiw	r28, 0x0a	; 10
     230:	cd bf       	out	0x3d, r28	; 61
     232:	de bf       	out	0x3e, r29	; 62
     234:	8d 83       	std	Y+5, r24	; 0x05
     236:	9e 83       	std	Y+6, r25	; 0x06
	long result;
	result = (long) AccRaw - CALL_OFFSET_X;
     238:	8d 81       	ldd	r24, Y+5	; 0x05
     23a:	9e 81       	ldd	r25, Y+6	; 0x06
     23c:	cc 01       	movw	r24, r24
     23e:	a0 e0       	ldi	r26, 0x00	; 0
     240:	b0 e0       	ldi	r27, 0x00	; 0
     242:	84 58       	subi	r24, 0x84	; 132
     244:	93 40       	sbci	r25, 0x03	; 3
     246:	a1 09       	sbc	r26, r1
     248:	b1 09       	sbc	r27, r1
     24a:	89 83       	std	Y+1, r24	; 0x01
     24c:	9a 83       	std	Y+2, r25	; 0x02
     24e:	ab 83       	std	Y+3, r26	; 0x03
     250:	bc 83       	std	Y+4, r27	; 0x04
	result *= 1000;
     252:	29 81       	ldd	r18, Y+1	; 0x01
     254:	3a 81       	ldd	r19, Y+2	; 0x02
     256:	4b 81       	ldd	r20, Y+3	; 0x03
     258:	5c 81       	ldd	r21, Y+4	; 0x04
     25a:	88 ee       	ldi	r24, 0xE8	; 232
     25c:	93 e0       	ldi	r25, 0x03	; 3
     25e:	dc 01       	movw	r26, r24
     260:	0e 94 94 05 	call	0xb28	; 0xb28 <__muluhisi3>
     264:	dc 01       	movw	r26, r24
     266:	cb 01       	movw	r24, r22
     268:	89 83       	std	Y+1, r24	; 0x01
     26a:	9a 83       	std	Y+2, r25	; 0x02
     26c:	ab 83       	std	Y+3, r26	; 0x03
     26e:	bc 83       	std	Y+4, r27	; 0x04
	result = result / SCALE_FACTOR_X;
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	9a 81       	ldd	r25, Y+2	; 0x02
     274:	ab 81       	ldd	r26, Y+3	; 0x03
     276:	bc 81       	ldd	r27, Y+4	; 0x04
     278:	2c e2       	ldi	r18, 0x2C	; 44
     27a:	31 e0       	ldi	r19, 0x01	; 1
     27c:	40 e0       	ldi	r20, 0x00	; 0
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	bc 01       	movw	r22, r24
     282:	cd 01       	movw	r24, r26
     284:	0e 94 75 05 	call	0xaea	; 0xaea <__divmodsi4>
     288:	da 01       	movw	r26, r20
     28a:	c9 01       	movw	r24, r18
     28c:	89 83       	std	Y+1, r24	; 0x01
     28e:	9a 83       	std	Y+2, r25	; 0x02
     290:	ab 83       	std	Y+3, r26	; 0x03
     292:	bc 83       	std	Y+4, r27	; 0x04
	return (int) result;
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	9a 81       	ldd	r25, Y+2	; 0x02
}
     298:	2a 96       	adiw	r28, 0x0a	; 10
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	08 95       	ret

000002a4 <AccGetYAxis>:

int AccGetYAxis(unsigned int AccRaw)
{
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	2a 97       	sbiw	r28, 0x0a	; 10
     2ae:	cd bf       	out	0x3d, r28	; 61
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	8d 83       	std	Y+5, r24	; 0x05
     2b4:	9e 83       	std	Y+6, r25	; 0x06
	long result;
	result = (long) AccRaw - CALL_OFFSET_Y;
     2b6:	8d 81       	ldd	r24, Y+5	; 0x05
     2b8:	9e 81       	ldd	r25, Y+6	; 0x06
     2ba:	cc 01       	movw	r24, r24
     2bc:	a0 e0       	ldi	r26, 0x00	; 0
     2be:	b0 e0       	ldi	r27, 0x00	; 0
     2c0:	81 5b       	subi	r24, 0xB1	; 177
     2c2:	93 40       	sbci	r25, 0x03	; 3
     2c4:	a1 09       	sbc	r26, r1
     2c6:	b1 09       	sbc	r27, r1
     2c8:	89 83       	std	Y+1, r24	; 0x01
     2ca:	9a 83       	std	Y+2, r25	; 0x02
     2cc:	ab 83       	std	Y+3, r26	; 0x03
     2ce:	bc 83       	std	Y+4, r27	; 0x04
	result *= 1000;
     2d0:	29 81       	ldd	r18, Y+1	; 0x01
     2d2:	3a 81       	ldd	r19, Y+2	; 0x02
     2d4:	4b 81       	ldd	r20, Y+3	; 0x03
     2d6:	5c 81       	ldd	r21, Y+4	; 0x04
     2d8:	88 ee       	ldi	r24, 0xE8	; 232
     2da:	93 e0       	ldi	r25, 0x03	; 3
     2dc:	dc 01       	movw	r26, r24
     2de:	0e 94 94 05 	call	0xb28	; 0xb28 <__muluhisi3>
     2e2:	dc 01       	movw	r26, r24
     2e4:	cb 01       	movw	r24, r22
     2e6:	89 83       	std	Y+1, r24	; 0x01
     2e8:	9a 83       	std	Y+2, r25	; 0x02
     2ea:	ab 83       	std	Y+3, r26	; 0x03
     2ec:	bc 83       	std	Y+4, r27	; 0x04
	result = result / SCALE_FACTOR_Y;
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	9a 81       	ldd	r25, Y+2	; 0x02
     2f2:	ab 81       	ldd	r26, Y+3	; 0x03
     2f4:	bc 81       	ldd	r27, Y+4	; 0x04
     2f6:	20 e2       	ldi	r18, 0x20	; 32
     2f8:	33 e0       	ldi	r19, 0x03	; 3
     2fa:	40 e0       	ldi	r20, 0x00	; 0
     2fc:	50 e0       	ldi	r21, 0x00	; 0
     2fe:	bc 01       	movw	r22, r24
     300:	cd 01       	movw	r24, r26
     302:	0e 94 75 05 	call	0xaea	; 0xaea <__divmodsi4>
     306:	da 01       	movw	r26, r20
     308:	c9 01       	movw	r24, r18
     30a:	89 83       	std	Y+1, r24	; 0x01
     30c:	9a 83       	std	Y+2, r25	; 0x02
     30e:	ab 83       	std	Y+3, r26	; 0x03
     310:	bc 83       	std	Y+4, r27	; 0x04
	return (int) result;
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	9a 81       	ldd	r25, Y+2	; 0x02
}
     316:	2a 96       	adiw	r28, 0x0a	; 10
     318:	cd bf       	out	0x3d, r28	; 61
     31a:	de bf       	out	0x3e, r29	; 62
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <AccGetZAxis>:

int AccGetZAxis(unsigned int AccRaw)
{
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	2a 97       	sbiw	r28, 0x0a	; 10
     32c:	cd bf       	out	0x3d, r28	; 61
     32e:	de bf       	out	0x3e, r29	; 62
     330:	8d 83       	std	Y+5, r24	; 0x05
     332:	9e 83       	std	Y+6, r25	; 0x06
	long result;
	result = (long) AccRaw - CALL_OFFSET_Z;
     334:	8d 81       	ldd	r24, Y+5	; 0x05
     336:	9e 81       	ldd	r25, Y+6	; 0x06
     338:	cc 01       	movw	r24, r24
     33a:	a0 e0       	ldi	r26, 0x00	; 0
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	80 56       	subi	r24, 0x60	; 96
     340:	94 40       	sbci	r25, 0x04	; 4
     342:	a1 09       	sbc	r26, r1
     344:	b1 09       	sbc	r27, r1
     346:	89 83       	std	Y+1, r24	; 0x01
     348:	9a 83       	std	Y+2, r25	; 0x02
     34a:	ab 83       	std	Y+3, r26	; 0x03
     34c:	bc 83       	std	Y+4, r27	; 0x04
	result *= 1000;
     34e:	29 81       	ldd	r18, Y+1	; 0x01
     350:	3a 81       	ldd	r19, Y+2	; 0x02
     352:	4b 81       	ldd	r20, Y+3	; 0x03
     354:	5c 81       	ldd	r21, Y+4	; 0x04
     356:	88 ee       	ldi	r24, 0xE8	; 232
     358:	93 e0       	ldi	r25, 0x03	; 3
     35a:	dc 01       	movw	r26, r24
     35c:	0e 94 94 05 	call	0xb28	; 0xb28 <__muluhisi3>
     360:	dc 01       	movw	r26, r24
     362:	cb 01       	movw	r24, r22
     364:	89 83       	std	Y+1, r24	; 0x01
     366:	9a 83       	std	Y+2, r25	; 0x02
     368:	ab 83       	std	Y+3, r26	; 0x03
     36a:	bc 83       	std	Y+4, r27	; 0x04
	result = result / SCALE_FACTOR_Z;
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	9a 81       	ldd	r25, Y+2	; 0x02
     370:	ab 81       	ldd	r26, Y+3	; 0x03
     372:	bc 81       	ldd	r27, Y+4	; 0x04
     374:	20 e4       	ldi	r18, 0x40	; 64
     376:	36 e0       	ldi	r19, 0x06	; 6
     378:	40 e0       	ldi	r20, 0x00	; 0
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	bc 01       	movw	r22, r24
     37e:	cd 01       	movw	r24, r26
     380:	0e 94 75 05 	call	0xaea	; 0xaea <__divmodsi4>
     384:	da 01       	movw	r26, r20
     386:	c9 01       	movw	r24, r18
     388:	89 83       	std	Y+1, r24	; 0x01
     38a:	9a 83       	std	Y+2, r25	; 0x02
     38c:	ab 83       	std	Y+3, r26	; 0x03
     38e:	bc 83       	std	Y+4, r27	; 0x04
	return (int) result;
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	9a 81       	ldd	r25, Y+2	; 0x02
     394:	2a 96       	adiw	r28, 0x0a	; 10
     396:	cd bf       	out	0x3d, r28	; 61
     398:	de bf       	out	0x3e, r29	; 62
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret

000003a0 <AnalogInit>:
#include "Analog.h"
#include <avr/io.h>

void AnalogInit(void)
{
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRCLR=PIN0_bm;		//0x01
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	96 e0       	ldi	r25, 0x06	; 6
     3ac:	21 e0       	ldi	r18, 0x01	; 1
     3ae:	fc 01       	movw	r30, r24
     3b0:	22 83       	std	Z+2, r18	; 0x02
	PORTA.DIRCLR = PIN1_bm;		//0x02
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	96 e0       	ldi	r25, 0x06	; 6
     3b6:	22 e0       	ldi	r18, 0x02	; 2
     3b8:	fc 01       	movw	r30, r24
     3ba:	22 83       	std	Z+2, r18	; 0x02
	PORTA.DIRCLR = PIN2_bm;		//0x04
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	96 e0       	ldi	r25, 0x06	; 6
     3c0:	24 e0       	ldi	r18, 0x04	; 4
     3c2:	fc 01       	movw	r30, r24
     3c4:	22 83       	std	Z+2, r18	; 0x02
	PORTA.DIRCLR = PIN3_bm;		//0x08
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	96 e0       	ldi	r25, 0x06	; 6
     3ca:	28 e0       	ldi	r18, 0x08	; 8
     3cc:	fc 01       	movw	r30, r24
     3ce:	22 83       	std	Z+2, r18	; 0x02
	PORTA.DIRCLR = PIN4_bm;		//0x10
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	96 e0       	ldi	r25, 0x06	; 6
     3d4:	20 e1       	ldi	r18, 0x10	; 16
     3d6:	fc 01       	movw	r30, r24
     3d8:	22 83       	std	Z+2, r18	; 0x02
	
	//set reference to internal 1V reference
	ADCA.REFCTRL=ADC_BANDGAP_bm;		// of = ADC_BANDGAP_bm		//Setting this bit enables the bandgap for ADC measurement
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	22 e0       	ldi	r18, 0x02	; 2
     3e0:	fc 01       	movw	r30, r24
     3e2:	22 83       	std	Z+2, r18	; 0x02
	
	//enable the ADC
	ADCA.CTRLA=ADC_ENABLE_bm;			 // of = ADC_ENABLE_bm
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	92 e0       	ldi	r25, 0x02	; 2
     3e8:	21 e0       	ldi	r18, 0x01	; 1
     3ea:	fc 01       	movw	r30, r24
     3ec:	20 83       	st	Z, r18
	
	// default settings for resolution and conversion mode, use 12-bit ad conversion, signed/unsigned is selected at each conversion
	// NOT -> 1110 1111 ---- bit 4 = conversion mode -> 0 = unsigned, 1 = signed (p. 258)
	ADCA.CTRLB &= ADC_CONMODE_bm;
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	92 e0       	ldi	r25, 0x02	; 2
     3f2:	20 e0       	ldi	r18, 0x00	; 0
     3f4:	32 e0       	ldi	r19, 0x02	; 2
     3f6:	f9 01       	movw	r30, r18
     3f8:	21 81       	ldd	r18, Z+1	; 0x01
     3fa:	20 71       	andi	r18, 0x10	; 16
     3fc:	fc 01       	movw	r30, r24
     3fe:	21 83       	std	Z+1, r18	; 0x01
	
	//configure prescaler ADC
	ADCA.PRESCALER = ADC_PRESCALER_DIV16_gc;	//of = 	ADC_PRESCALER_DIV16_gc (zijn al variabelen die aangemaakt zijn --> zoveel makkelijker!	//define the ADC clock relative to the peripheral clock. DIV16 --> moet kleiner zijn als 1,4 Mhz
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	92 e0       	ldi	r25, 0x02	; 2
     404:	22 e0       	ldi	r18, 0x02	; 2
     406:	fc 01       	movw	r30, r24
     408:	24 83       	std	Z+4, r18	; 0x04
	
}
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <AnalogGetCh>:
//Return value:
	//-2048 to 2047 (signed) or 0 to 4095 (unsigned)
	//10000: Invalid pin settings

int AnalogGetCh(int PinPos,int PinNeg)
{
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
     418:	26 97       	sbiw	r28, 0x06	; 6
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	8b 83       	std	Y+3, r24	; 0x03
     420:	9c 83       	std	Y+4, r25	; 0x04
     422:	6d 83       	std	Y+5, r22	; 0x05
     424:	7e 83       	std	Y+6, r23	; 0x06
	int result=0;
     426:	19 82       	std	Y+1, r1	; 0x01
     428:	1a 82       	std	Y+2, r1	; 0x02
	
	//Config with parameters
	
	//single ended mode --> zie uitleg boven methode
	if(PinPos <=15 && PinNeg==-1 ) 
     42a:	8b 81       	ldd	r24, Y+3	; 0x03
     42c:	9c 81       	ldd	r25, Y+4	; 0x04
     42e:	80 31       	cpi	r24, 0x10	; 16
     430:	91 05       	cpc	r25, r1
     432:	a4 f4       	brge	.+40     	; 0x45c <AnalogGetCh+0x4c>
     434:	8d 81       	ldd	r24, Y+5	; 0x05
     436:	9e 81       	ldd	r25, Y+6	; 0x06
     438:	8f 3f       	cpi	r24, 0xFF	; 255
     43a:	2f ef       	ldi	r18, 0xFF	; 255
     43c:	92 07       	cpc	r25, r18
     43e:	71 f4       	brne	.+28     	; 0x45c <AnalogGetCh+0x4c>
	{
		//clear bit 4 of CTRL register to set conversion mode to unsigned
		//ADCA.CTRLB &= ~ADC_CONMODE_bm;		//0x10	-->niet zeker van dit!!!	Bitwise AND + Bitwise NOT : ~ (Bits that are 0 become 1, and those that are 1 become 0)
		//configure single ended mode for unsigned mode (and set no gain)
		ADCA.CH0.CTRL = ADC_CH_INPUTMODE_SINGLEENDED_gc;		//0x01 <<0
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	21 e0       	ldi	r18, 0x01	; 1
     446:	fc 01       	movw	r30, r24
     448:	20 a3       	std	Z+32, r18	; 0x20
		//select input on inputmux
		ADCA.CH0.MUXCTRL = (PinPos)<<3;	//MUX_NEG will be set to 0		//bitwise shift left
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	92 e0       	ldi	r25, 0x02	; 2
     44e:	2b 81       	ldd	r18, Y+3	; 0x03
     450:	22 0f       	add	r18, r18
     452:	22 0f       	add	r18, r18
     454:	22 0f       	add	r18, r18
     456:	fc 01       	movw	r30, r24
     458:	21 a3       	std	Z+33, r18	; 0x21
     45a:	2d c0       	rjmp	.+90     	; 0x4b6 <AnalogGetCh+0xa6>
	}
	
	//differential mode 
	else if (PinPos<=15 && PinNeg<=7)	//pinpos <=7??
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	9c 81       	ldd	r25, Y+4	; 0x04
     460:	80 31       	cpi	r24, 0x10	; 16
     462:	91 05       	cpc	r25, r1
     464:	24 f5       	brge	.+72     	; 0x4ae <AnalogGetCh+0x9e>
     466:	8d 81       	ldd	r24, Y+5	; 0x05
     468:	9e 81       	ldd	r25, Y+6	; 0x06
     46a:	88 30       	cpi	r24, 0x08	; 8
     46c:	91 05       	cpc	r25, r1
     46e:	fc f4       	brge	.+62     	; 0x4ae <AnalogGetCh+0x9e>
	{
		//set bit 4 of CTRL register to set conversion mode to signed
		ADCA.CTRLB|=ADC_CONMODE_bm;
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	92 e0       	ldi	r25, 0x02	; 2
     474:	20 e0       	ldi	r18, 0x00	; 0
     476:	32 e0       	ldi	r19, 0x02	; 2
     478:	f9 01       	movw	r30, r18
     47a:	21 81       	ldd	r18, Z+1	; 0x01
     47c:	20 61       	ori	r18, 0x10	; 16
     47e:	fc 01       	movw	r30, r24
     480:	21 83       	std	Z+1, r18	; 0x01
		//configure differential mode with gain ()for signed mode
		ADCA.CH0.CTRL=ADC_CH_INPUTMODE_DIFFWGAIN_gc;		//0x03<<0	--> gain = 1
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	92 e0       	ldi	r25, 0x02	; 2
     486:	23 e0       	ldi	r18, 0x03	; 3
     488:	fc 01       	movw	r30, r24
     48a:	20 a3       	std	Z+32, r18	; 0x20
		//select inputs on inputmux
		ADCA.CH0.MUXCTRL = (PinPos)<<3 | (PinNeg-4);
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	2b 81       	ldd	r18, Y+3	; 0x03
     492:	3c 81       	ldd	r19, Y+4	; 0x04
     494:	22 0f       	add	r18, r18
     496:	33 1f       	adc	r19, r19
     498:	22 0f       	add	r18, r18
     49a:	33 1f       	adc	r19, r19
     49c:	22 0f       	add	r18, r18
     49e:	33 1f       	adc	r19, r19
     4a0:	32 2f       	mov	r19, r18
     4a2:	2d 81       	ldd	r18, Y+5	; 0x05
     4a4:	24 50       	subi	r18, 0x04	; 4
     4a6:	23 2b       	or	r18, r19
     4a8:	fc 01       	movw	r30, r24
     4aa:	21 a3       	std	Z+33, r18	; 0x21
     4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <AnalogGetCh+0xa6>
	}
	// invalid pin settings
	else
		result =  100000;
     4ae:	80 ea       	ldi	r24, 0xA0	; 160
     4b0:	96 e8       	ldi	r25, 0x86	; 134
     4b2:	89 83       	std	Y+1, r24	; 0x01
     4b4:	9a 83       	std	Y+2, r25	; 0x02
	
	
	//Start meting (NO freerun)
	ADCA.CTRLA = (0b00000100 | ADCA.CTRLA);		// of |= ADC_CH0START_bm
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	92 e0       	ldi	r25, 0x02	; 2
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	32 e0       	ldi	r19, 0x02	; 2
     4be:	f9 01       	movw	r30, r18
     4c0:	20 81       	ld	r18, Z
     4c2:	24 60       	ori	r18, 0x04	; 4
     4c4:	fc 01       	movw	r30, r24
     4c6:	20 83       	st	Z, r18
	
	//Wait until conversion / for measure result		//op CH0 of algemene flagss??
	while(ADCA.CH0.INTFLAGS != 0x01) { }	//set flag is set when the ADC conversion is complete
     4c8:	00 00       	nop
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	92 e0       	ldi	r25, 0x02	; 2
     4ce:	fc 01       	movw	r30, r24
     4d0:	83 a1       	ldd	r24, Z+35	; 0x23
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	d1 f7       	brne	.-12     	; 0x4ca <AnalogGetCh+0xba>
	ADCA.CH0.INTFLAGS = 0x01;
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	92 e0       	ldi	r25, 0x02	; 2
     4da:	21 e0       	ldi	r18, 0x01	; 1
     4dc:	fc 01       	movw	r30, r24
     4de:	23 a3       	std	Z+35, r18	; 0x23
	
	//Get result
	result =  ADCA.CH0RES;
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	92 e0       	ldi	r25, 0x02	; 2
     4e4:	fc 01       	movw	r30, r24
     4e6:	80 89       	ldd	r24, Z+16	; 0x10
     4e8:	91 89       	ldd	r25, Z+17	; 0x11
     4ea:	89 83       	std	Y+1, r24	; 0x01
     4ec:	9a 83       	std	Y+2, r25	; 0x02
	
	// return result
	return result;
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	9a 81       	ldd	r25, Y+2	; 0x02
     4f2:	26 96       	adiw	r28, 0x06	; 6
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <ClockInit>:
     4fe:	8b ec       	ldi	r24, 0xCB	; 203
     500:	80 93 52 00 	sts	0x0052, r24
     504:	88 e0       	ldi	r24, 0x08	; 8
     506:	80 93 50 00 	sts	0x0050, r24
     50a:	80 91 51 00 	lds	r24, 0x0051
     50e:	83 ff       	sbrs	r24, 3
     510:	fc cf       	rjmp	.-8      	; 0x50a <ClockInit+0xc>
     512:	88 ed       	ldi	r24, 0xD8	; 216
     514:	84 bf       	out	0x34, r24	; 52
     516:	83 e0       	ldi	r24, 0x03	; 3
     518:	80 93 40 00 	sts	0x0040, r24
     51c:	08 95       	ret

0000051e <EncoderInit>:
#include <util/delay.h>
#include <stdio.h>
#include "encoder.h"

void EncoderInit(void)
{
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
	//pc5 en 6 voor 2 ind interrupts op willekeurige flank
	PORTC.PIN4CTRL = 0b00000000;		//totempole / sense on tboth edges
     526:	80 e4       	ldi	r24, 0x40	; 64
     528:	96 e0       	ldi	r25, 0x06	; 6
     52a:	fc 01       	movw	r30, r24
     52c:	14 8a       	std	Z+20, r1	; 0x14
	PORTC.PIN5CTRL = 0b00000000;		//totempole / sense on tboth edges
     52e:	80 e4       	ldi	r24, 0x40	; 64
     530:	96 e0       	ldi	r25, 0x06	; 6
     532:	fc 01       	movw	r30, r24
     534:	15 8a       	std	Z+21, r1	; 0x15
	//ISR schrijven + globale variabele (volatile)
	
	
}
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <main>:

void SimpleFunction(void);	//A simple function: transmit digits 0 to 9 to the terminal device
void RunLight(void);

int main(void)
{	
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
     544:	2e 97       	sbiw	r28, 0x0e	; 14
     546:	cd bf       	out	0x3d, r28	; 61
     548:	de bf       	out	0x3e, r29	; 62
	//###1###
	 
	//Initialize subsystems
	ClockInit();			//Initialize system clock (16 MHz)
     54a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <ClockInit>
	USARTInit();			//Initialize USART and bind to stdout,stdin
     54e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <USARTInit>
	AnalogInit();			//Initialize ADC
     552:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <AnalogInit>
	AccInit();				//Initialize accelerometer system
     556:	0e 94 d5 00 	call	0x1aa	; 0x1aa <AccInit>
	LEDInit();				//Initialize LEDs
     55a:	0e 94 90 03 	call	0x720	; 0x720 <LEDInit>
	SwitchInit();			//Initialize switches
     55e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <SwitchInit>
	EncoderInit();			//Initialize encoder
     562:	0e 94 8f 02 	call	0x51e	; 0x51e <EncoderInit>
	SpeakerInit();			//Initialize speaker system
     566:	0e 94 c9 03 	call	0x792	; 0x792 <SpeakerInit>
	
	//Enable interrupts
	PMIC.CTRL|=0b00000111;  //Enable low, medium, high priority interrupts
     56a:	80 ea       	ldi	r24, 0xA0	; 160
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	20 ea       	ldi	r18, 0xA0	; 160
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	f9 01       	movw	r30, r18
     574:	22 81       	ldd	r18, Z+2	; 0x02
     576:	27 60       	ori	r18, 0x07	; 7
     578:	fc 01       	movw	r30, r24
     57a:	22 83       	std	Z+2, r18	; 0x02
	SREG|=0b10000000;		//Globale interrupt enable
     57c:	8f e3       	ldi	r24, 0x3F	; 63
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	2f e3       	ldi	r18, 0x3F	; 63
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	f9 01       	movw	r30, r18
     586:	20 81       	ld	r18, Z
     588:	20 68       	ori	r18, 0x80	; 128
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
	}*/	

	//###3###

	//Main program loop
	AccInit();
     58e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <AccInit>
	a=0;
     592:	10 92 33 20 	sts	0x2033, r1
    while(1)
    {
		RunLight();
     596:	0e 94 78 03 	call	0x6f0	; 0x6f0 <RunLight>
		//printf("$SWITCH %d\r\n", SwitchGet());
		//printf("%d",terminalByte);
		PrintADC();
     59a:	0e 94 42 03 	call	0x684	; 0x684 <PrintADC>
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	a8 e4       	ldi	r26, 0x48	; 72
     5a4:	b3 e4       	ldi	r27, 0x43	; 67
     5a6:	89 83       	std	Y+1, r24	; 0x01
     5a8:	9a 83       	std	Y+2, r25	; 0x02
     5aa:	ab 83       	std	Y+3, r26	; 0x03
     5ac:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	4a e7       	ldi	r20, 0x7A	; 122
     5b4:	55 e4       	ldi	r21, 0x45	; 69
     5b6:	69 81       	ldd	r22, Y+1	; 0x01
     5b8:	7a 81       	ldd	r23, Y+2	; 0x02
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	9c 81       	ldd	r25, Y+4	; 0x04
     5be:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__mulsf3>
     5c2:	dc 01       	movw	r26, r24
     5c4:	cb 01       	movw	r24, r22
     5c6:	8d 83       	std	Y+5, r24	; 0x05
     5c8:	9e 83       	std	Y+6, r25	; 0x06
     5ca:	af 83       	std	Y+7, r26	; 0x07
     5cc:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     5ce:	20 e0       	ldi	r18, 0x00	; 0
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	40 e8       	ldi	r20, 0x80	; 128
     5d4:	5f e3       	ldi	r21, 0x3F	; 63
     5d6:	6d 81       	ldd	r22, Y+5	; 0x05
     5d8:	7e 81       	ldd	r23, Y+6	; 0x06
     5da:	8f 81       	ldd	r24, Y+7	; 0x07
     5dc:	98 85       	ldd	r25, Y+8	; 0x08
     5de:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__cmpsf2>
     5e2:	88 23       	and	r24, r24
     5e4:	2c f4       	brge	.+10     	; 0x5f0 <main+0xb4>
		__ticks = 1;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	89 87       	std	Y+9, r24	; 0x09
     5ec:	9a 87       	std	Y+10, r25	; 0x0a
     5ee:	3f c0       	rjmp	.+126    	; 0x66e <main+0x132>
	else if (__tmp > 65535)
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	3f ef       	ldi	r19, 0xFF	; 255
     5f4:	4f e7       	ldi	r20, 0x7F	; 127
     5f6:	57 e4       	ldi	r21, 0x47	; 71
     5f8:	6d 81       	ldd	r22, Y+5	; 0x05
     5fa:	7e 81       	ldd	r23, Y+6	; 0x06
     5fc:	8f 81       	ldd	r24, Y+7	; 0x07
     5fe:	98 85       	ldd	r25, Y+8	; 0x08
     600:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__gesf2>
     604:	18 16       	cp	r1, r24
     606:	4c f5       	brge	.+82     	; 0x65a <main+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	40 e2       	ldi	r20, 0x20	; 32
     60e:	51 e4       	ldi	r21, 0x41	; 65
     610:	69 81       	ldd	r22, Y+1	; 0x01
     612:	7a 81       	ldd	r23, Y+2	; 0x02
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__mulsf3>
     61c:	dc 01       	movw	r26, r24
     61e:	cb 01       	movw	r24, r22
     620:	bc 01       	movw	r22, r24
     622:	cd 01       	movw	r24, r26
     624:	0e 94 6d 04 	call	0x8da	; 0x8da <__fixunssfsi>
     628:	dc 01       	movw	r26, r24
     62a:	cb 01       	movw	r24, r22
     62c:	89 87       	std	Y+9, r24	; 0x09
     62e:	9a 87       	std	Y+10, r25	; 0x0a
     630:	0f c0       	rjmp	.+30     	; 0x650 <main+0x114>
     632:	80 e9       	ldi	r24, 0x90	; 144
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	8b 87       	std	Y+11, r24	; 0x0b
     638:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     63a:	8b 85       	ldd	r24, Y+11	; 0x0b
     63c:	9c 85       	ldd	r25, Y+12	; 0x0c
     63e:	01 97       	sbiw	r24, 0x01	; 1
     640:	f1 f7       	brne	.-4      	; 0x63e <main+0x102>
     642:	8b 87       	std	Y+11, r24	; 0x0b
     644:	9c 87       	std	Y+12, r25	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     646:	89 85       	ldd	r24, Y+9	; 0x09
     648:	9a 85       	ldd	r25, Y+10	; 0x0a
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	89 87       	std	Y+9, r24	; 0x09
     64e:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     650:	89 85       	ldd	r24, Y+9	; 0x09
     652:	9a 85       	ldd	r25, Y+10	; 0x0a
     654:	00 97       	sbiw	r24, 0x00	; 0
     656:	69 f7       	brne	.-38     	; 0x632 <main+0xf6>
		_delay_ms(200);
    }
     658:	9e cf       	rjmp	.-196    	; 0x596 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     65a:	6d 81       	ldd	r22, Y+5	; 0x05
     65c:	7e 81       	ldd	r23, Y+6	; 0x06
     65e:	8f 81       	ldd	r24, Y+7	; 0x07
     660:	98 85       	ldd	r25, Y+8	; 0x08
     662:	0e 94 6d 04 	call	0x8da	; 0x8da <__fixunssfsi>
     666:	dc 01       	movw	r26, r24
     668:	cb 01       	movw	r24, r22
     66a:	89 87       	std	Y+9, r24	; 0x09
     66c:	9a 87       	std	Y+10, r25	; 0x0a
     66e:	89 85       	ldd	r24, Y+9	; 0x09
     670:	9a 85       	ldd	r25, Y+10	; 0x0a
     672:	8d 87       	std	Y+13, r24	; 0x0d
     674:	9e 87       	std	Y+14, r25	; 0x0e
     676:	8d 85       	ldd	r24, Y+13	; 0x0d
     678:	9e 85       	ldd	r25, Y+14	; 0x0e
     67a:	01 97       	sbiw	r24, 0x01	; 1
     67c:	f1 f7       	brne	.-4      	; 0x67a <main+0x13e>
     67e:	8d 87       	std	Y+13, r24	; 0x0d
     680:	9e 87       	std	Y+14, r25	; 0x0e
     682:	89 cf       	rjmp	.-238    	; 0x596 <main+0x5a>

00000684 <PrintADC>:
{
	for (b=0;b<10;b++)
		printf ("%d ",b);
}

void PrintADC(void) {
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
	//AnalogInit();
	//printf("$ACC__ x: %d. y: %d. z: %d. \r\n", AccGetXAxisRaw(), AccGetYAxisRaw(), AccGetZAxisRaw());
	printf("$ACC__ x: %d. y: %d. z: %d. \r\n", AccGetXAxis(AccGetXAxisRaw()), AccGetYAxis(AccGetYAxisRaw()), AccGetZAxis(AccGetZAxisRaw()));
     694:	0e 94 06 01 	call	0x20c	; 0x20c <AccGetZAxisRaw>
     698:	0e 94 91 01 	call	0x322	; 0x322 <AccGetZAxis>
     69c:	7c 01       	movw	r14, r24
     69e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <AccGetYAxisRaw>
     6a2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <AccGetYAxis>
     6a6:	8c 01       	movw	r16, r24
     6a8:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <AccGetXAxisRaw>
     6ac:	0e 94 13 01 	call	0x226	; 0x226 <AccGetXAxis>
     6b0:	2f 2d       	mov	r18, r15
     6b2:	2f 93       	push	r18
     6b4:	2e 2d       	mov	r18, r14
     6b6:	2f 93       	push	r18
     6b8:	21 2f       	mov	r18, r17
     6ba:	2f 93       	push	r18
     6bc:	20 2f       	mov	r18, r16
     6be:	2f 93       	push	r18
     6c0:	29 2f       	mov	r18, r25
     6c2:	2f 93       	push	r18
     6c4:	8f 93       	push	r24
     6c6:	83 e1       	ldi	r24, 0x13	; 19
     6c8:	90 e2       	ldi	r25, 0x20	; 32
     6ca:	89 2f       	mov	r24, r25
     6cc:	8f 93       	push	r24
     6ce:	83 e1       	ldi	r24, 0x13	; 19
     6d0:	90 e2       	ldi	r25, 0x20	; 32
     6d2:	8f 93       	push	r24
     6d4:	0e 94 d0 05 	call	0xba0	; 0xba0 <printf>
     6d8:	8d b7       	in	r24, 0x3d	; 61
     6da:	9e b7       	in	r25, 0x3e	; 62
     6dc:	08 96       	adiw	r24, 0x08	; 8
     6de:	cd bf       	out	0x3d, r28	; 61
     6e0:	de bf       	out	0x3e, r29	; 62
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	08 95       	ret

000006f0 <RunLight>:

void RunLight(void)
{
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
	if(ledOn == 0x08)							//4de bit actief (led: D4)
     6f8:	80 91 00 20 	lds	r24, 0x2000
     6fc:	88 30       	cpi	r24, 0x08	; 8
     6fe:	21 f4       	brne	.+8      	; 0x708 <RunLight+0x18>
	{
		//0000 1000
		ledOn = 0x01;							//1ste bit actief (led: D1)
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	80 93 00 20 	sts	0x2000, r24
     706:	05 c0       	rjmp	.+10     	; 0x712 <RunLight+0x22>
		//printf("ledOn = 0x01\r\n");
	}
	else
	{
		ledOn = ledOn << 1; 					//Actieve bit links shiften
     708:	80 91 00 20 	lds	r24, 0x2000
     70c:	88 0f       	add	r24, r24
     70e:	80 93 00 20 	sts	0x2000, r24
		//printf("ledOn shifted left\r\n", ledOn);
	}
	
	LEDSet(ledOn);
     712:	80 91 00 20 	lds	r24, 0x2000
     716:	0e 94 b0 03 	call	0x760	; 0x760 <LEDSet>
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	08 95       	ret

00000720 <LEDInit>:
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	cd b7       	in	r28, 0x3d	; 61
     726:	de b7       	in	r29, 0x3e	; 62
     728:	80 e8       	ldi	r24, 0x80	; 128
     72a:	96 e0       	ldi	r25, 0x06	; 6
     72c:	2f e0       	ldi	r18, 0x0F	; 15
     72e:	fc 01       	movw	r30, r24
     730:	21 83       	std	Z+1, r18	; 0x01
     732:	80 e8       	ldi	r24, 0x80	; 128
     734:	96 e0       	ldi	r25, 0x06	; 6
     736:	20 e4       	ldi	r18, 0x40	; 64
     738:	fc 01       	movw	r30, r24
     73a:	20 8b       	std	Z+16, r18	; 0x10
     73c:	80 e8       	ldi	r24, 0x80	; 128
     73e:	96 e0       	ldi	r25, 0x06	; 6
     740:	20 e4       	ldi	r18, 0x40	; 64
     742:	fc 01       	movw	r30, r24
     744:	21 8b       	std	Z+17, r18	; 0x11
     746:	80 e8       	ldi	r24, 0x80	; 128
     748:	96 e0       	ldi	r25, 0x06	; 6
     74a:	20 e4       	ldi	r18, 0x40	; 64
     74c:	fc 01       	movw	r30, r24
     74e:	22 8b       	std	Z+18, r18	; 0x12
     750:	80 e8       	ldi	r24, 0x80	; 128
     752:	96 e0       	ldi	r25, 0x06	; 6
     754:	20 e4       	ldi	r18, 0x40	; 64
     756:	fc 01       	movw	r30, r24
     758:	23 8b       	std	Z+19, r18	; 0x13
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <LEDSet>:
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	1f 92       	push	r1
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	89 83       	std	Y+1, r24	; 0x01
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	8f 70       	andi	r24, 0x0F	; 15
     770:	89 83       	std	Y+1, r24	; 0x01
     772:	80 e8       	ldi	r24, 0x80	; 128
     774:	96 e0       	ldi	r25, 0x06	; 6
     776:	20 e8       	ldi	r18, 0x80	; 128
     778:	36 e0       	ldi	r19, 0x06	; 6
     77a:	f9 01       	movw	r30, r18
     77c:	24 81       	ldd	r18, Z+4	; 0x04
     77e:	32 2f       	mov	r19, r18
     780:	30 7f       	andi	r19, 0xF0	; 240
     782:	29 81       	ldd	r18, Y+1	; 0x01
     784:	23 2b       	or	r18, r19
     786:	fc 01       	movw	r30, r24
     788:	24 83       	std	Z+4, r18	; 0x04
     78a:	0f 90       	pop	r0
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <SpeakerInit>:
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <SwitchInit>:
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	80 e6       	ldi	r24, 0x60	; 96
     7aa:	96 e0       	ldi	r25, 0x06	; 6
     7ac:	21 ef       	ldi	r18, 0xF1	; 241
     7ae:	fc 01       	movw	r30, r24
     7b0:	22 83       	std	Z+2, r18	; 0x02
     7b2:	80 e6       	ldi	r24, 0x60	; 96
     7b4:	96 e0       	ldi	r25, 0x06	; 6
     7b6:	29 e5       	ldi	r18, 0x59	; 89
     7b8:	fc 01       	movw	r30, r24
     7ba:	20 8b       	std	Z+16, r18	; 0x10
     7bc:	80 e6       	ldi	r24, 0x60	; 96
     7be:	96 e0       	ldi	r25, 0x06	; 6
     7c0:	29 e5       	ldi	r18, 0x59	; 89
     7c2:	fc 01       	movw	r30, r24
     7c4:	24 8b       	std	Z+20, r18	; 0x14
     7c6:	80 e6       	ldi	r24, 0x60	; 96
     7c8:	96 e0       	ldi	r25, 0x06	; 6
     7ca:	29 e5       	ldi	r18, 0x59	; 89
     7cc:	fc 01       	movw	r30, r24
     7ce:	25 8b       	std	Z+21, r18	; 0x15
     7d0:	80 e6       	ldi	r24, 0x60	; 96
     7d2:	96 e0       	ldi	r25, 0x06	; 6
     7d4:	29 e5       	ldi	r18, 0x59	; 89
     7d6:	fc 01       	movw	r30, r24
     7d8:	26 8b       	std	Z+22, r18	; 0x16
     7da:	80 e6       	ldi	r24, 0x60	; 96
     7dc:	96 e0       	ldi	r25, 0x06	; 6
     7de:	29 e5       	ldi	r18, 0x59	; 89
     7e0:	fc 01       	movw	r30, r24
     7e2:	27 8b       	std	Z+23, r18	; 0x17
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	08 95       	ret

000007ea <USARTInit>:
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	80 e6       	ldi	r24, 0x60	; 96
     7f4:	96 e0       	ldi	r25, 0x06	; 6
     7f6:	28 e0       	ldi	r18, 0x08	; 8
     7f8:	fc 01       	movw	r30, r24
     7fa:	21 83       	std	Z+1, r18	; 0x01
     7fc:	80 e6       	ldi	r24, 0x60	; 96
     7fe:	96 e0       	ldi	r25, 0x06	; 6
     800:	24 e0       	ldi	r18, 0x04	; 4
     802:	fc 01       	movw	r30, r24
     804:	22 83       	std	Z+2, r18	; 0x02
     806:	80 ea       	ldi	r24, 0xA0	; 160
     808:	99 e0       	ldi	r25, 0x09	; 9
     80a:	fc 01       	movw	r30, r24
     80c:	13 82       	std	Z+3, r1	; 0x03
     80e:	80 ea       	ldi	r24, 0xA0	; 160
     810:	99 e0       	ldi	r25, 0x09	; 9
     812:	28 e1       	ldi	r18, 0x18	; 24
     814:	fc 01       	movw	r30, r24
     816:	24 83       	std	Z+4, r18	; 0x04
     818:	80 ea       	ldi	r24, 0xA0	; 160
     81a:	99 e0       	ldi	r25, 0x09	; 9
     81c:	23 e0       	ldi	r18, 0x03	; 3
     81e:	fc 01       	movw	r30, r24
     820:	25 83       	std	Z+5, r18	; 0x05
     822:	80 ea       	ldi	r24, 0xA0	; 160
     824:	99 e0       	ldi	r25, 0x09	; 9
     826:	27 ed       	ldi	r18, 0xD7	; 215
     828:	fc 01       	movw	r30, r24
     82a:	26 83       	std	Z+6, r18	; 0x06
     82c:	80 ea       	ldi	r24, 0xA0	; 160
     82e:	99 e0       	ldi	r25, 0x09	; 9
     830:	23 e9       	ldi	r18, 0x93	; 147
     832:	fc 01       	movw	r30, r24
     834:	27 83       	std	Z+7, r18	; 0x07
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e2       	ldi	r25, 0x20	; 32
     83a:	80 93 36 20 	sts	0x2036, r24
     83e:	90 93 37 20 	sts	0x2037, r25
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e2       	ldi	r25, 0x20	; 32
     846:	80 93 34 20 	sts	0x2034, r24
     84a:	90 93 35 20 	sts	0x2035, r25
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <stdio_putchar>:
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	00 d0       	rcall	.+0      	; 0x85a <stdio_putchar+0x6>
     85a:	1f 92       	push	r1
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
     860:	89 83       	std	Y+1, r24	; 0x01
     862:	6a 83       	std	Y+2, r22	; 0x02
     864:	7b 83       	std	Y+3, r23	; 0x03
     866:	80 ea       	ldi	r24, 0xA0	; 160
     868:	99 e0       	ldi	r25, 0x09	; 9
     86a:	29 81       	ldd	r18, Y+1	; 0x01
     86c:	fc 01       	movw	r30, r24
     86e:	20 83       	st	Z, r18
     870:	00 00       	nop
     872:	80 ea       	ldi	r24, 0xA0	; 160
     874:	99 e0       	ldi	r25, 0x09	; 9
     876:	fc 01       	movw	r30, r24
     878:	81 81       	ldd	r24, Z+1	; 0x01
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	80 74       	andi	r24, 0x40	; 64
     880:	99 27       	eor	r25, r25
     882:	00 97       	sbiw	r24, 0x00	; 0
     884:	b1 f3       	breq	.-20     	; 0x872 <stdio_putchar+0x1e>
     886:	80 ea       	ldi	r24, 0xA0	; 160
     888:	99 e0       	ldi	r25, 0x09	; 9
     88a:	20 e4       	ldi	r18, 0x40	; 64
     88c:	fc 01       	movw	r30, r24
     88e:	21 83       	std	Z+1, r18	; 0x01
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	23 96       	adiw	r28, 0x03	; 3
     896:	cd bf       	out	0x3d, r28	; 61
     898:	de bf       	out	0x3e, r29	; 62
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	08 95       	ret

000008a0 <stdio_getchar>:
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	00 d0       	rcall	.+0      	; 0x8a6 <stdio_getchar+0x6>
     8a6:	cd b7       	in	r28, 0x3d	; 61
     8a8:	de b7       	in	r29, 0x3e	; 62
     8aa:	89 83       	std	Y+1, r24	; 0x01
     8ac:	9a 83       	std	Y+2, r25	; 0x02
     8ae:	00 00       	nop
     8b0:	80 ea       	ldi	r24, 0xA0	; 160
     8b2:	99 e0       	ldi	r25, 0x09	; 9
     8b4:	fc 01       	movw	r30, r24
     8b6:	81 81       	ldd	r24, Z+1	; 0x01
     8b8:	88 23       	and	r24, r24
     8ba:	d4 f7       	brge	.-12     	; 0x8b0 <stdio_getchar+0x10>
     8bc:	80 ea       	ldi	r24, 0xA0	; 160
     8be:	99 e0       	ldi	r25, 0x09	; 9
     8c0:	fc 01       	movw	r30, r24
     8c2:	80 81       	ld	r24, Z
     8c4:	88 2f       	mov	r24, r24
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <__cmpsf2>:
     8d2:	2f d0       	rcall	.+94     	; 0x932 <__fp_cmp>
     8d4:	08 f4       	brcc	.+2      	; 0x8d8 <__cmpsf2+0x6>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	08 95       	ret

000008da <__fixunssfsi>:
     8da:	57 d0       	rcall	.+174    	; 0x98a <__fp_splitA>
     8dc:	88 f0       	brcs	.+34     	; 0x900 <__fixunssfsi+0x26>
     8de:	9f 57       	subi	r25, 0x7F	; 127
     8e0:	90 f0       	brcs	.+36     	; 0x906 <__fixunssfsi+0x2c>
     8e2:	b9 2f       	mov	r27, r25
     8e4:	99 27       	eor	r25, r25
     8e6:	b7 51       	subi	r27, 0x17	; 23
     8e8:	a0 f0       	brcs	.+40     	; 0x912 <__fixunssfsi+0x38>
     8ea:	d1 f0       	breq	.+52     	; 0x920 <__fixunssfsi+0x46>
     8ec:	66 0f       	add	r22, r22
     8ee:	77 1f       	adc	r23, r23
     8f0:	88 1f       	adc	r24, r24
     8f2:	99 1f       	adc	r25, r25
     8f4:	1a f0       	brmi	.+6      	; 0x8fc <__fixunssfsi+0x22>
     8f6:	ba 95       	dec	r27
     8f8:	c9 f7       	brne	.-14     	; 0x8ec <__fixunssfsi+0x12>
     8fa:	12 c0       	rjmp	.+36     	; 0x920 <__fixunssfsi+0x46>
     8fc:	b1 30       	cpi	r27, 0x01	; 1
     8fe:	81 f0       	breq	.+32     	; 0x920 <__fixunssfsi+0x46>
     900:	5e d0       	rcall	.+188    	; 0x9be <__fp_zero>
     902:	b1 e0       	ldi	r27, 0x01	; 1
     904:	08 95       	ret
     906:	5b c0       	rjmp	.+182    	; 0x9be <__fp_zero>
     908:	67 2f       	mov	r22, r23
     90a:	78 2f       	mov	r23, r24
     90c:	88 27       	eor	r24, r24
     90e:	b8 5f       	subi	r27, 0xF8	; 248
     910:	39 f0       	breq	.+14     	; 0x920 <__fixunssfsi+0x46>
     912:	b9 3f       	cpi	r27, 0xF9	; 249
     914:	cc f3       	brlt	.-14     	; 0x908 <__fixunssfsi+0x2e>
     916:	86 95       	lsr	r24
     918:	77 95       	ror	r23
     91a:	67 95       	ror	r22
     91c:	b3 95       	inc	r27
     91e:	d9 f7       	brne	.-10     	; 0x916 <__fixunssfsi+0x3c>
     920:	3e f4       	brtc	.+14     	; 0x930 <__fixunssfsi+0x56>
     922:	90 95       	com	r25
     924:	80 95       	com	r24
     926:	70 95       	com	r23
     928:	61 95       	neg	r22
     92a:	7f 4f       	sbci	r23, 0xFF	; 255
     92c:	8f 4f       	sbci	r24, 0xFF	; 255
     92e:	9f 4f       	sbci	r25, 0xFF	; 255
     930:	08 95       	ret

00000932 <__fp_cmp>:
     932:	99 0f       	add	r25, r25
     934:	00 08       	sbc	r0, r0
     936:	55 0f       	add	r21, r21
     938:	aa 0b       	sbc	r26, r26
     93a:	e0 e8       	ldi	r30, 0x80	; 128
     93c:	fe ef       	ldi	r31, 0xFE	; 254
     93e:	16 16       	cp	r1, r22
     940:	17 06       	cpc	r1, r23
     942:	e8 07       	cpc	r30, r24
     944:	f9 07       	cpc	r31, r25
     946:	c0 f0       	brcs	.+48     	; 0x978 <__fp_cmp+0x46>
     948:	12 16       	cp	r1, r18
     94a:	13 06       	cpc	r1, r19
     94c:	e4 07       	cpc	r30, r20
     94e:	f5 07       	cpc	r31, r21
     950:	98 f0       	brcs	.+38     	; 0x978 <__fp_cmp+0x46>
     952:	62 1b       	sub	r22, r18
     954:	73 0b       	sbc	r23, r19
     956:	84 0b       	sbc	r24, r20
     958:	95 0b       	sbc	r25, r21
     95a:	39 f4       	brne	.+14     	; 0x96a <__fp_cmp+0x38>
     95c:	0a 26       	eor	r0, r26
     95e:	61 f0       	breq	.+24     	; 0x978 <__fp_cmp+0x46>
     960:	23 2b       	or	r18, r19
     962:	24 2b       	or	r18, r20
     964:	25 2b       	or	r18, r21
     966:	21 f4       	brne	.+8      	; 0x970 <__fp_cmp+0x3e>
     968:	08 95       	ret
     96a:	0a 26       	eor	r0, r26
     96c:	09 f4       	brne	.+2      	; 0x970 <__fp_cmp+0x3e>
     96e:	a1 40       	sbci	r26, 0x01	; 1
     970:	a6 95       	lsr	r26
     972:	8f ef       	ldi	r24, 0xFF	; 255
     974:	81 1d       	adc	r24, r1
     976:	81 1d       	adc	r24, r1
     978:	08 95       	ret

0000097a <__fp_split3>:
     97a:	57 fd       	sbrc	r21, 7
     97c:	90 58       	subi	r25, 0x80	; 128
     97e:	44 0f       	add	r20, r20
     980:	55 1f       	adc	r21, r21
     982:	59 f0       	breq	.+22     	; 0x99a <__fp_splitA+0x10>
     984:	5f 3f       	cpi	r21, 0xFF	; 255
     986:	71 f0       	breq	.+28     	; 0x9a4 <__fp_splitA+0x1a>
     988:	47 95       	ror	r20

0000098a <__fp_splitA>:
     98a:	88 0f       	add	r24, r24
     98c:	97 fb       	bst	r25, 7
     98e:	99 1f       	adc	r25, r25
     990:	61 f0       	breq	.+24     	; 0x9aa <__fp_splitA+0x20>
     992:	9f 3f       	cpi	r25, 0xFF	; 255
     994:	79 f0       	breq	.+30     	; 0x9b4 <__fp_splitA+0x2a>
     996:	87 95       	ror	r24
     998:	08 95       	ret
     99a:	12 16       	cp	r1, r18
     99c:	13 06       	cpc	r1, r19
     99e:	14 06       	cpc	r1, r20
     9a0:	55 1f       	adc	r21, r21
     9a2:	f2 cf       	rjmp	.-28     	; 0x988 <__fp_split3+0xe>
     9a4:	46 95       	lsr	r20
     9a6:	f1 df       	rcall	.-30     	; 0x98a <__fp_splitA>
     9a8:	08 c0       	rjmp	.+16     	; 0x9ba <__fp_splitA+0x30>
     9aa:	16 16       	cp	r1, r22
     9ac:	17 06       	cpc	r1, r23
     9ae:	18 06       	cpc	r1, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	f1 cf       	rjmp	.-30     	; 0x996 <__fp_splitA+0xc>
     9b4:	86 95       	lsr	r24
     9b6:	71 05       	cpc	r23, r1
     9b8:	61 05       	cpc	r22, r1
     9ba:	08 94       	sec
     9bc:	08 95       	ret

000009be <__fp_zero>:
     9be:	e8 94       	clt

000009c0 <__fp_szero>:
     9c0:	bb 27       	eor	r27, r27
     9c2:	66 27       	eor	r22, r22
     9c4:	77 27       	eor	r23, r23
     9c6:	cb 01       	movw	r24, r22
     9c8:	97 f9       	bld	r25, 7
     9ca:	08 95       	ret

000009cc <__gesf2>:
     9cc:	b2 df       	rcall	.-156    	; 0x932 <__fp_cmp>
     9ce:	08 f4       	brcc	.+2      	; 0x9d2 <__gesf2+0x6>
     9d0:	8f ef       	ldi	r24, 0xFF	; 255
     9d2:	08 95       	ret

000009d4 <__mulsf3>:
     9d4:	0b d0       	rcall	.+22     	; 0x9ec <__mulsf3x>
     9d6:	78 c0       	rjmp	.+240    	; 0xac8 <__fp_round>
     9d8:	69 d0       	rcall	.+210    	; 0xaac <__fp_pscA>
     9da:	28 f0       	brcs	.+10     	; 0x9e6 <__mulsf3+0x12>
     9dc:	6e d0       	rcall	.+220    	; 0xaba <__fp_pscB>
     9de:	18 f0       	brcs	.+6      	; 0x9e6 <__mulsf3+0x12>
     9e0:	95 23       	and	r25, r21
     9e2:	09 f0       	breq	.+2      	; 0x9e6 <__mulsf3+0x12>
     9e4:	5a c0       	rjmp	.+180    	; 0xa9a <__fp_inf>
     9e6:	5f c0       	rjmp	.+190    	; 0xaa6 <__fp_nan>
     9e8:	11 24       	eor	r1, r1
     9ea:	ea cf       	rjmp	.-44     	; 0x9c0 <__fp_szero>

000009ec <__mulsf3x>:
     9ec:	c6 df       	rcall	.-116    	; 0x97a <__fp_split3>
     9ee:	a0 f3       	brcs	.-24     	; 0x9d8 <__mulsf3+0x4>

000009f0 <__mulsf3_pse>:
     9f0:	95 9f       	mul	r25, r21
     9f2:	d1 f3       	breq	.-12     	; 0x9e8 <__mulsf3+0x14>
     9f4:	95 0f       	add	r25, r21
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	55 1f       	adc	r21, r21
     9fa:	62 9f       	mul	r22, r18
     9fc:	f0 01       	movw	r30, r0
     9fe:	72 9f       	mul	r23, r18
     a00:	bb 27       	eor	r27, r27
     a02:	f0 0d       	add	r31, r0
     a04:	b1 1d       	adc	r27, r1
     a06:	63 9f       	mul	r22, r19
     a08:	aa 27       	eor	r26, r26
     a0a:	f0 0d       	add	r31, r0
     a0c:	b1 1d       	adc	r27, r1
     a0e:	aa 1f       	adc	r26, r26
     a10:	64 9f       	mul	r22, r20
     a12:	66 27       	eor	r22, r22
     a14:	b0 0d       	add	r27, r0
     a16:	a1 1d       	adc	r26, r1
     a18:	66 1f       	adc	r22, r22
     a1a:	82 9f       	mul	r24, r18
     a1c:	22 27       	eor	r18, r18
     a1e:	b0 0d       	add	r27, r0
     a20:	a1 1d       	adc	r26, r1
     a22:	62 1f       	adc	r22, r18
     a24:	73 9f       	mul	r23, r19
     a26:	b0 0d       	add	r27, r0
     a28:	a1 1d       	adc	r26, r1
     a2a:	62 1f       	adc	r22, r18
     a2c:	83 9f       	mul	r24, r19
     a2e:	a0 0d       	add	r26, r0
     a30:	61 1d       	adc	r22, r1
     a32:	22 1f       	adc	r18, r18
     a34:	74 9f       	mul	r23, r20
     a36:	33 27       	eor	r19, r19
     a38:	a0 0d       	add	r26, r0
     a3a:	61 1d       	adc	r22, r1
     a3c:	23 1f       	adc	r18, r19
     a3e:	84 9f       	mul	r24, r20
     a40:	60 0d       	add	r22, r0
     a42:	21 1d       	adc	r18, r1
     a44:	82 2f       	mov	r24, r18
     a46:	76 2f       	mov	r23, r22
     a48:	6a 2f       	mov	r22, r26
     a4a:	11 24       	eor	r1, r1
     a4c:	9f 57       	subi	r25, 0x7F	; 127
     a4e:	50 40       	sbci	r21, 0x00	; 0
     a50:	8a f0       	brmi	.+34     	; 0xa74 <__mulsf3_pse+0x84>
     a52:	e1 f0       	breq	.+56     	; 0xa8c <__mulsf3_pse+0x9c>
     a54:	88 23       	and	r24, r24
     a56:	4a f0       	brmi	.+18     	; 0xa6a <__mulsf3_pse+0x7a>
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	bb 1f       	adc	r27, r27
     a5e:	66 1f       	adc	r22, r22
     a60:	77 1f       	adc	r23, r23
     a62:	88 1f       	adc	r24, r24
     a64:	91 50       	subi	r25, 0x01	; 1
     a66:	50 40       	sbci	r21, 0x00	; 0
     a68:	a9 f7       	brne	.-22     	; 0xa54 <__mulsf3_pse+0x64>
     a6a:	9e 3f       	cpi	r25, 0xFE	; 254
     a6c:	51 05       	cpc	r21, r1
     a6e:	70 f0       	brcs	.+28     	; 0xa8c <__mulsf3_pse+0x9c>
     a70:	14 c0       	rjmp	.+40     	; 0xa9a <__fp_inf>
     a72:	a6 cf       	rjmp	.-180    	; 0x9c0 <__fp_szero>
     a74:	5f 3f       	cpi	r21, 0xFF	; 255
     a76:	ec f3       	brlt	.-6      	; 0xa72 <__mulsf3_pse+0x82>
     a78:	98 3e       	cpi	r25, 0xE8	; 232
     a7a:	dc f3       	brlt	.-10     	; 0xa72 <__mulsf3_pse+0x82>
     a7c:	86 95       	lsr	r24
     a7e:	77 95       	ror	r23
     a80:	67 95       	ror	r22
     a82:	b7 95       	ror	r27
     a84:	f7 95       	ror	r31
     a86:	e7 95       	ror	r30
     a88:	9f 5f       	subi	r25, 0xFF	; 255
     a8a:	c1 f7       	brne	.-16     	; 0xa7c <__mulsf3_pse+0x8c>
     a8c:	fe 2b       	or	r31, r30
     a8e:	88 0f       	add	r24, r24
     a90:	91 1d       	adc	r25, r1
     a92:	96 95       	lsr	r25
     a94:	87 95       	ror	r24
     a96:	97 f9       	bld	r25, 7
     a98:	08 95       	ret

00000a9a <__fp_inf>:
     a9a:	97 f9       	bld	r25, 7
     a9c:	9f 67       	ori	r25, 0x7F	; 127
     a9e:	80 e8       	ldi	r24, 0x80	; 128
     aa0:	70 e0       	ldi	r23, 0x00	; 0
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	08 95       	ret

00000aa6 <__fp_nan>:
     aa6:	9f ef       	ldi	r25, 0xFF	; 255
     aa8:	80 ec       	ldi	r24, 0xC0	; 192
     aaa:	08 95       	ret

00000aac <__fp_pscA>:
     aac:	00 24       	eor	r0, r0
     aae:	0a 94       	dec	r0
     ab0:	16 16       	cp	r1, r22
     ab2:	17 06       	cpc	r1, r23
     ab4:	18 06       	cpc	r1, r24
     ab6:	09 06       	cpc	r0, r25
     ab8:	08 95       	ret

00000aba <__fp_pscB>:
     aba:	00 24       	eor	r0, r0
     abc:	0a 94       	dec	r0
     abe:	12 16       	cp	r1, r18
     ac0:	13 06       	cpc	r1, r19
     ac2:	14 06       	cpc	r1, r20
     ac4:	05 06       	cpc	r0, r21
     ac6:	08 95       	ret

00000ac8 <__fp_round>:
     ac8:	09 2e       	mov	r0, r25
     aca:	03 94       	inc	r0
     acc:	00 0c       	add	r0, r0
     ace:	11 f4       	brne	.+4      	; 0xad4 <__fp_round+0xc>
     ad0:	88 23       	and	r24, r24
     ad2:	52 f0       	brmi	.+20     	; 0xae8 <__fp_round+0x20>
     ad4:	bb 0f       	add	r27, r27
     ad6:	40 f4       	brcc	.+16     	; 0xae8 <__fp_round+0x20>
     ad8:	bf 2b       	or	r27, r31
     ada:	11 f4       	brne	.+4      	; 0xae0 <__fp_round+0x18>
     adc:	60 ff       	sbrs	r22, 0
     ade:	04 c0       	rjmp	.+8      	; 0xae8 <__fp_round+0x20>
     ae0:	6f 5f       	subi	r22, 0xFF	; 255
     ae2:	7f 4f       	sbci	r23, 0xFF	; 255
     ae4:	8f 4f       	sbci	r24, 0xFF	; 255
     ae6:	9f 4f       	sbci	r25, 0xFF	; 255
     ae8:	08 95       	ret

00000aea <__divmodsi4>:
     aea:	05 2e       	mov	r0, r21
     aec:	97 fb       	bst	r25, 7
     aee:	1e f4       	brtc	.+6      	; 0xaf6 <__divmodsi4+0xc>
     af0:	00 94       	com	r0
     af2:	0e 94 8c 05 	call	0xb18	; 0xb18 <__negsi2>
     af6:	57 fd       	sbrc	r21, 7
     af8:	07 d0       	rcall	.+14     	; 0xb08 <__divmodsi4_neg2>
     afa:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__udivmodsi4>
     afe:	07 fc       	sbrc	r0, 7
     b00:	03 d0       	rcall	.+6      	; 0xb08 <__divmodsi4_neg2>
     b02:	4e f4       	brtc	.+18     	; 0xb16 <__divmodsi4_exit>
     b04:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__negsi2>

00000b08 <__divmodsi4_neg2>:
     b08:	50 95       	com	r21
     b0a:	40 95       	com	r20
     b0c:	30 95       	com	r19
     b0e:	21 95       	neg	r18
     b10:	3f 4f       	sbci	r19, 0xFF	; 255
     b12:	4f 4f       	sbci	r20, 0xFF	; 255
     b14:	5f 4f       	sbci	r21, 0xFF	; 255

00000b16 <__divmodsi4_exit>:
     b16:	08 95       	ret

00000b18 <__negsi2>:
     b18:	90 95       	com	r25
     b1a:	80 95       	com	r24
     b1c:	70 95       	com	r23
     b1e:	61 95       	neg	r22
     b20:	7f 4f       	sbci	r23, 0xFF	; 255
     b22:	8f 4f       	sbci	r24, 0xFF	; 255
     b24:	9f 4f       	sbci	r25, 0xFF	; 255
     b26:	08 95       	ret

00000b28 <__muluhisi3>:
     b28:	0e 94 c1 05 	call	0xb82	; 0xb82 <__umulhisi3>
     b2c:	a5 9f       	mul	r26, r21
     b2e:	90 0d       	add	r25, r0
     b30:	b4 9f       	mul	r27, r20
     b32:	90 0d       	add	r25, r0
     b34:	a4 9f       	mul	r26, r20
     b36:	80 0d       	add	r24, r0
     b38:	91 1d       	adc	r25, r1
     b3a:	11 24       	eor	r1, r1
     b3c:	08 95       	ret

00000b3e <__udivmodsi4>:
     b3e:	a1 e2       	ldi	r26, 0x21	; 33
     b40:	1a 2e       	mov	r1, r26
     b42:	aa 1b       	sub	r26, r26
     b44:	bb 1b       	sub	r27, r27
     b46:	fd 01       	movw	r30, r26
     b48:	0d c0       	rjmp	.+26     	; 0xb64 <__udivmodsi4_ep>

00000b4a <__udivmodsi4_loop>:
     b4a:	aa 1f       	adc	r26, r26
     b4c:	bb 1f       	adc	r27, r27
     b4e:	ee 1f       	adc	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	a2 17       	cp	r26, r18
     b54:	b3 07       	cpc	r27, r19
     b56:	e4 07       	cpc	r30, r20
     b58:	f5 07       	cpc	r31, r21
     b5a:	20 f0       	brcs	.+8      	; 0xb64 <__udivmodsi4_ep>
     b5c:	a2 1b       	sub	r26, r18
     b5e:	b3 0b       	sbc	r27, r19
     b60:	e4 0b       	sbc	r30, r20
     b62:	f5 0b       	sbc	r31, r21

00000b64 <__udivmodsi4_ep>:
     b64:	66 1f       	adc	r22, r22
     b66:	77 1f       	adc	r23, r23
     b68:	88 1f       	adc	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	1a 94       	dec	r1
     b6e:	69 f7       	brne	.-38     	; 0xb4a <__udivmodsi4_loop>
     b70:	60 95       	com	r22
     b72:	70 95       	com	r23
     b74:	80 95       	com	r24
     b76:	90 95       	com	r25
     b78:	9b 01       	movw	r18, r22
     b7a:	ac 01       	movw	r20, r24
     b7c:	bd 01       	movw	r22, r26
     b7e:	cf 01       	movw	r24, r30
     b80:	08 95       	ret

00000b82 <__umulhisi3>:
     b82:	a2 9f       	mul	r26, r18
     b84:	b0 01       	movw	r22, r0
     b86:	b3 9f       	mul	r27, r19
     b88:	c0 01       	movw	r24, r0
     b8a:	a3 9f       	mul	r26, r19
     b8c:	70 0d       	add	r23, r0
     b8e:	81 1d       	adc	r24, r1
     b90:	11 24       	eor	r1, r1
     b92:	91 1d       	adc	r25, r1
     b94:	b2 9f       	mul	r27, r18
     b96:	70 0d       	add	r23, r0
     b98:	81 1d       	adc	r24, r1
     b9a:	11 24       	eor	r1, r1
     b9c:	91 1d       	adc	r25, r1
     b9e:	08 95       	ret

00000ba0 <printf>:
     ba0:	a0 e0       	ldi	r26, 0x00	; 0
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e6 ed       	ldi	r30, 0xD6	; 214
     ba6:	f5 e0       	ldi	r31, 0x05	; 5
     ba8:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <__prologue_saves__+0x20>
     bac:	fe 01       	movw	r30, r28
     bae:	35 96       	adiw	r30, 0x05	; 5
     bb0:	61 91       	ld	r22, Z+
     bb2:	71 91       	ld	r23, Z+
     bb4:	af 01       	movw	r20, r30
     bb6:	80 91 36 20 	lds	r24, 0x2036
     bba:	90 91 37 20 	lds	r25, 0x2037
     bbe:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <vfprintf>
     bc2:	e2 e0       	ldi	r30, 0x02	; 2
     bc4:	0c 94 85 08 	jmp	0x110a	; 0x110a <__epilogue_restores__+0x20>

00000bc8 <vfprintf>:
     bc8:	ac e0       	ldi	r26, 0x0C	; 12
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	ea ee       	ldi	r30, 0xEA	; 234
     bce:	f5 e0       	ldi	r31, 0x05	; 5
     bd0:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__prologue_saves__>
     bd4:	7c 01       	movw	r14, r24
     bd6:	6b 01       	movw	r12, r22
     bd8:	8a 01       	movw	r16, r20
     bda:	fc 01       	movw	r30, r24
     bdc:	16 82       	std	Z+6, r1	; 0x06
     bde:	17 82       	std	Z+7, r1	; 0x07
     be0:	83 81       	ldd	r24, Z+3	; 0x03
     be2:	81 ff       	sbrs	r24, 1
     be4:	bd c1       	rjmp	.+890    	; 0xf60 <vfprintf+0x398>
     be6:	ce 01       	movw	r24, r28
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	4c 01       	movw	r8, r24
     bec:	f7 01       	movw	r30, r14
     bee:	93 81       	ldd	r25, Z+3	; 0x03
     bf0:	f6 01       	movw	r30, r12
     bf2:	93 fd       	sbrc	r25, 3
     bf4:	85 91       	lpm	r24, Z+
     bf6:	93 ff       	sbrs	r25, 3
     bf8:	81 91       	ld	r24, Z+
     bfa:	6f 01       	movw	r12, r30
     bfc:	88 23       	and	r24, r24
     bfe:	09 f4       	brne	.+2      	; 0xc02 <vfprintf+0x3a>
     c00:	ab c1       	rjmp	.+854    	; 0xf58 <vfprintf+0x390>
     c02:	85 32       	cpi	r24, 0x25	; 37
     c04:	39 f4       	brne	.+14     	; 0xc14 <vfprintf+0x4c>
     c06:	93 fd       	sbrc	r25, 3
     c08:	85 91       	lpm	r24, Z+
     c0a:	93 ff       	sbrs	r25, 3
     c0c:	81 91       	ld	r24, Z+
     c0e:	6f 01       	movw	r12, r30
     c10:	85 32       	cpi	r24, 0x25	; 37
     c12:	29 f4       	brne	.+10     	; 0xc1e <vfprintf+0x56>
     c14:	b7 01       	movw	r22, r14
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 cc 07 	call	0xf98	; 0xf98 <fputc>
     c1c:	e7 cf       	rjmp	.-50     	; 0xbec <vfprintf+0x24>
     c1e:	51 2c       	mov	r5, r1
     c20:	31 2c       	mov	r3, r1
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	20 32       	cpi	r18, 0x20	; 32
     c26:	a0 f4       	brcc	.+40     	; 0xc50 <vfprintf+0x88>
     c28:	8b 32       	cpi	r24, 0x2B	; 43
     c2a:	69 f0       	breq	.+26     	; 0xc46 <vfprintf+0x7e>
     c2c:	30 f4       	brcc	.+12     	; 0xc3a <vfprintf+0x72>
     c2e:	80 32       	cpi	r24, 0x20	; 32
     c30:	59 f0       	breq	.+22     	; 0xc48 <vfprintf+0x80>
     c32:	83 32       	cpi	r24, 0x23	; 35
     c34:	69 f4       	brne	.+26     	; 0xc50 <vfprintf+0x88>
     c36:	20 61       	ori	r18, 0x10	; 16
     c38:	2c c0       	rjmp	.+88     	; 0xc92 <vfprintf+0xca>
     c3a:	8d 32       	cpi	r24, 0x2D	; 45
     c3c:	39 f0       	breq	.+14     	; 0xc4c <vfprintf+0x84>
     c3e:	80 33       	cpi	r24, 0x30	; 48
     c40:	39 f4       	brne	.+14     	; 0xc50 <vfprintf+0x88>
     c42:	21 60       	ori	r18, 0x01	; 1
     c44:	26 c0       	rjmp	.+76     	; 0xc92 <vfprintf+0xca>
     c46:	22 60       	ori	r18, 0x02	; 2
     c48:	24 60       	ori	r18, 0x04	; 4
     c4a:	23 c0       	rjmp	.+70     	; 0xc92 <vfprintf+0xca>
     c4c:	28 60       	ori	r18, 0x08	; 8
     c4e:	21 c0       	rjmp	.+66     	; 0xc92 <vfprintf+0xca>
     c50:	27 fd       	sbrc	r18, 7
     c52:	27 c0       	rjmp	.+78     	; 0xca2 <vfprintf+0xda>
     c54:	30 ed       	ldi	r19, 0xD0	; 208
     c56:	38 0f       	add	r19, r24
     c58:	3a 30       	cpi	r19, 0x0A	; 10
     c5a:	78 f4       	brcc	.+30     	; 0xc7a <vfprintf+0xb2>
     c5c:	26 ff       	sbrs	r18, 6
     c5e:	06 c0       	rjmp	.+12     	; 0xc6c <vfprintf+0xa4>
     c60:	fa e0       	ldi	r31, 0x0A	; 10
     c62:	5f 9e       	mul	r5, r31
     c64:	30 0d       	add	r19, r0
     c66:	11 24       	eor	r1, r1
     c68:	53 2e       	mov	r5, r19
     c6a:	13 c0       	rjmp	.+38     	; 0xc92 <vfprintf+0xca>
     c6c:	8a e0       	ldi	r24, 0x0A	; 10
     c6e:	38 9e       	mul	r3, r24
     c70:	30 0d       	add	r19, r0
     c72:	11 24       	eor	r1, r1
     c74:	33 2e       	mov	r3, r19
     c76:	20 62       	ori	r18, 0x20	; 32
     c78:	0c c0       	rjmp	.+24     	; 0xc92 <vfprintf+0xca>
     c7a:	8e 32       	cpi	r24, 0x2E	; 46
     c7c:	21 f4       	brne	.+8      	; 0xc86 <vfprintf+0xbe>
     c7e:	26 fd       	sbrc	r18, 6
     c80:	6b c1       	rjmp	.+726    	; 0xf58 <vfprintf+0x390>
     c82:	20 64       	ori	r18, 0x40	; 64
     c84:	06 c0       	rjmp	.+12     	; 0xc92 <vfprintf+0xca>
     c86:	8c 36       	cpi	r24, 0x6C	; 108
     c88:	11 f4       	brne	.+4      	; 0xc8e <vfprintf+0xc6>
     c8a:	20 68       	ori	r18, 0x80	; 128
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <vfprintf+0xca>
     c8e:	88 36       	cpi	r24, 0x68	; 104
     c90:	41 f4       	brne	.+16     	; 0xca2 <vfprintf+0xda>
     c92:	f6 01       	movw	r30, r12
     c94:	93 fd       	sbrc	r25, 3
     c96:	85 91       	lpm	r24, Z+
     c98:	93 ff       	sbrs	r25, 3
     c9a:	81 91       	ld	r24, Z+
     c9c:	6f 01       	movw	r12, r30
     c9e:	81 11       	cpse	r24, r1
     ca0:	c1 cf       	rjmp	.-126    	; 0xc24 <vfprintf+0x5c>
     ca2:	98 2f       	mov	r25, r24
     ca4:	9f 7d       	andi	r25, 0xDF	; 223
     ca6:	95 54       	subi	r25, 0x45	; 69
     ca8:	93 30       	cpi	r25, 0x03	; 3
     caa:	28 f4       	brcc	.+10     	; 0xcb6 <vfprintf+0xee>
     cac:	0c 5f       	subi	r16, 0xFC	; 252
     cae:	1f 4f       	sbci	r17, 0xFF	; 255
     cb0:	ff e3       	ldi	r31, 0x3F	; 63
     cb2:	f9 83       	std	Y+1, r31	; 0x01
     cb4:	0d c0       	rjmp	.+26     	; 0xcd0 <vfprintf+0x108>
     cb6:	83 36       	cpi	r24, 0x63	; 99
     cb8:	31 f0       	breq	.+12     	; 0xcc6 <vfprintf+0xfe>
     cba:	83 37       	cpi	r24, 0x73	; 115
     cbc:	71 f0       	breq	.+28     	; 0xcda <vfprintf+0x112>
     cbe:	83 35       	cpi	r24, 0x53	; 83
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <vfprintf+0xfc>
     cc2:	5b c0       	rjmp	.+182    	; 0xd7a <vfprintf+0x1b2>
     cc4:	22 c0       	rjmp	.+68     	; 0xd0a <vfprintf+0x142>
     cc6:	f8 01       	movw	r30, r16
     cc8:	80 81       	ld	r24, Z
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	0e 5f       	subi	r16, 0xFE	; 254
     cce:	1f 4f       	sbci	r17, 0xFF	; 255
     cd0:	44 24       	eor	r4, r4
     cd2:	43 94       	inc	r4
     cd4:	51 2c       	mov	r5, r1
     cd6:	54 01       	movw	r10, r8
     cd8:	15 c0       	rjmp	.+42     	; 0xd04 <vfprintf+0x13c>
     cda:	38 01       	movw	r6, r16
     cdc:	f2 e0       	ldi	r31, 0x02	; 2
     cde:	6f 0e       	add	r6, r31
     ce0:	71 1c       	adc	r7, r1
     ce2:	f8 01       	movw	r30, r16
     ce4:	a0 80       	ld	r10, Z
     ce6:	b1 80       	ldd	r11, Z+1	; 0x01
     ce8:	26 ff       	sbrs	r18, 6
     cea:	03 c0       	rjmp	.+6      	; 0xcf2 <vfprintf+0x12a>
     cec:	65 2d       	mov	r22, r5
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <vfprintf+0x12e>
     cf2:	6f ef       	ldi	r22, 0xFF	; 255
     cf4:	7f ef       	ldi	r23, 0xFF	; 255
     cf6:	c5 01       	movw	r24, r10
     cf8:	2c 87       	std	Y+12, r18	; 0x0c
     cfa:	0e 94 c1 07 	call	0xf82	; 0xf82 <strnlen>
     cfe:	2c 01       	movw	r4, r24
     d00:	83 01       	movw	r16, r6
     d02:	2c 85       	ldd	r18, Y+12	; 0x0c
     d04:	2f 77       	andi	r18, 0x7F	; 127
     d06:	22 2e       	mov	r2, r18
     d08:	17 c0       	rjmp	.+46     	; 0xd38 <vfprintf+0x170>
     d0a:	38 01       	movw	r6, r16
     d0c:	f2 e0       	ldi	r31, 0x02	; 2
     d0e:	6f 0e       	add	r6, r31
     d10:	71 1c       	adc	r7, r1
     d12:	f8 01       	movw	r30, r16
     d14:	a0 80       	ld	r10, Z
     d16:	b1 80       	ldd	r11, Z+1	; 0x01
     d18:	26 ff       	sbrs	r18, 6
     d1a:	03 c0       	rjmp	.+6      	; 0xd22 <vfprintf+0x15a>
     d1c:	65 2d       	mov	r22, r5
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <vfprintf+0x15e>
     d22:	6f ef       	ldi	r22, 0xFF	; 255
     d24:	7f ef       	ldi	r23, 0xFF	; 255
     d26:	c5 01       	movw	r24, r10
     d28:	2c 87       	std	Y+12, r18	; 0x0c
     d2a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <strnlen_P>
     d2e:	2c 01       	movw	r4, r24
     d30:	2c 85       	ldd	r18, Y+12	; 0x0c
     d32:	20 68       	ori	r18, 0x80	; 128
     d34:	22 2e       	mov	r2, r18
     d36:	83 01       	movw	r16, r6
     d38:	23 fc       	sbrc	r2, 3
     d3a:	1b c0       	rjmp	.+54     	; 0xd72 <vfprintf+0x1aa>
     d3c:	83 2d       	mov	r24, r3
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	48 16       	cp	r4, r24
     d42:	59 06       	cpc	r5, r25
     d44:	b0 f4       	brcc	.+44     	; 0xd72 <vfprintf+0x1aa>
     d46:	b7 01       	movw	r22, r14
     d48:	80 e2       	ldi	r24, 0x20	; 32
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 cc 07 	call	0xf98	; 0xf98 <fputc>
     d50:	3a 94       	dec	r3
     d52:	f4 cf       	rjmp	.-24     	; 0xd3c <vfprintf+0x174>
     d54:	f5 01       	movw	r30, r10
     d56:	27 fc       	sbrc	r2, 7
     d58:	85 91       	lpm	r24, Z+
     d5a:	27 fe       	sbrs	r2, 7
     d5c:	81 91       	ld	r24, Z+
     d5e:	5f 01       	movw	r10, r30
     d60:	b7 01       	movw	r22, r14
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 cc 07 	call	0xf98	; 0xf98 <fputc>
     d68:	31 10       	cpse	r3, r1
     d6a:	3a 94       	dec	r3
     d6c:	f1 e0       	ldi	r31, 0x01	; 1
     d6e:	4f 1a       	sub	r4, r31
     d70:	51 08       	sbc	r5, r1
     d72:	41 14       	cp	r4, r1
     d74:	51 04       	cpc	r5, r1
     d76:	71 f7       	brne	.-36     	; 0xd54 <vfprintf+0x18c>
     d78:	e5 c0       	rjmp	.+458    	; 0xf44 <vfprintf+0x37c>
     d7a:	84 36       	cpi	r24, 0x64	; 100
     d7c:	11 f0       	breq	.+4      	; 0xd82 <vfprintf+0x1ba>
     d7e:	89 36       	cpi	r24, 0x69	; 105
     d80:	39 f5       	brne	.+78     	; 0xdd0 <vfprintf+0x208>
     d82:	f8 01       	movw	r30, r16
     d84:	27 ff       	sbrs	r18, 7
     d86:	07 c0       	rjmp	.+14     	; 0xd96 <vfprintf+0x1ce>
     d88:	60 81       	ld	r22, Z
     d8a:	71 81       	ldd	r23, Z+1	; 0x01
     d8c:	82 81       	ldd	r24, Z+2	; 0x02
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	0c 5f       	subi	r16, 0xFC	; 252
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	08 c0       	rjmp	.+16     	; 0xda6 <vfprintf+0x1de>
     d96:	60 81       	ld	r22, Z
     d98:	71 81       	ldd	r23, Z+1	; 0x01
     d9a:	88 27       	eor	r24, r24
     d9c:	77 fd       	sbrc	r23, 7
     d9e:	80 95       	com	r24
     da0:	98 2f       	mov	r25, r24
     da2:	0e 5f       	subi	r16, 0xFE	; 254
     da4:	1f 4f       	sbci	r17, 0xFF	; 255
     da6:	2f 76       	andi	r18, 0x6F	; 111
     da8:	b2 2e       	mov	r11, r18
     daa:	97 ff       	sbrs	r25, 7
     dac:	09 c0       	rjmp	.+18     	; 0xdc0 <vfprintf+0x1f8>
     dae:	90 95       	com	r25
     db0:	80 95       	com	r24
     db2:	70 95       	com	r23
     db4:	61 95       	neg	r22
     db6:	7f 4f       	sbci	r23, 0xFF	; 255
     db8:	8f 4f       	sbci	r24, 0xFF	; 255
     dba:	9f 4f       	sbci	r25, 0xFF	; 255
     dbc:	20 68       	ori	r18, 0x80	; 128
     dbe:	b2 2e       	mov	r11, r18
     dc0:	2a e0       	ldi	r18, 0x0A	; 10
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	a4 01       	movw	r20, r8
     dc6:	0e 94 fe 07 	call	0xffc	; 0xffc <__ultoa_invert>
     dca:	a8 2e       	mov	r10, r24
     dcc:	a8 18       	sub	r10, r8
     dce:	44 c0       	rjmp	.+136    	; 0xe58 <vfprintf+0x290>
     dd0:	85 37       	cpi	r24, 0x75	; 117
     dd2:	29 f4       	brne	.+10     	; 0xdde <vfprintf+0x216>
     dd4:	2f 7e       	andi	r18, 0xEF	; 239
     dd6:	b2 2e       	mov	r11, r18
     dd8:	2a e0       	ldi	r18, 0x0A	; 10
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	25 c0       	rjmp	.+74     	; 0xe28 <vfprintf+0x260>
     dde:	f2 2f       	mov	r31, r18
     de0:	f9 7f       	andi	r31, 0xF9	; 249
     de2:	bf 2e       	mov	r11, r31
     de4:	8f 36       	cpi	r24, 0x6F	; 111
     de6:	c1 f0       	breq	.+48     	; 0xe18 <vfprintf+0x250>
     de8:	18 f4       	brcc	.+6      	; 0xdf0 <vfprintf+0x228>
     dea:	88 35       	cpi	r24, 0x58	; 88
     dec:	79 f0       	breq	.+30     	; 0xe0c <vfprintf+0x244>
     dee:	b4 c0       	rjmp	.+360    	; 0xf58 <vfprintf+0x390>
     df0:	80 37       	cpi	r24, 0x70	; 112
     df2:	19 f0       	breq	.+6      	; 0xdfa <vfprintf+0x232>
     df4:	88 37       	cpi	r24, 0x78	; 120
     df6:	21 f0       	breq	.+8      	; 0xe00 <vfprintf+0x238>
     df8:	af c0       	rjmp	.+350    	; 0xf58 <vfprintf+0x390>
     dfa:	2f 2f       	mov	r18, r31
     dfc:	20 61       	ori	r18, 0x10	; 16
     dfe:	b2 2e       	mov	r11, r18
     e00:	b4 fe       	sbrs	r11, 4
     e02:	0d c0       	rjmp	.+26     	; 0xe1e <vfprintf+0x256>
     e04:	8b 2d       	mov	r24, r11
     e06:	84 60       	ori	r24, 0x04	; 4
     e08:	b8 2e       	mov	r11, r24
     e0a:	09 c0       	rjmp	.+18     	; 0xe1e <vfprintf+0x256>
     e0c:	24 ff       	sbrs	r18, 4
     e0e:	0a c0       	rjmp	.+20     	; 0xe24 <vfprintf+0x25c>
     e10:	9f 2f       	mov	r25, r31
     e12:	96 60       	ori	r25, 0x06	; 6
     e14:	b9 2e       	mov	r11, r25
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <vfprintf+0x25c>
     e18:	28 e0       	ldi	r18, 0x08	; 8
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <vfprintf+0x260>
     e1e:	20 e1       	ldi	r18, 0x10	; 16
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <vfprintf+0x260>
     e24:	20 e1       	ldi	r18, 0x10	; 16
     e26:	32 e0       	ldi	r19, 0x02	; 2
     e28:	f8 01       	movw	r30, r16
     e2a:	b7 fe       	sbrs	r11, 7
     e2c:	07 c0       	rjmp	.+14     	; 0xe3c <vfprintf+0x274>
     e2e:	60 81       	ld	r22, Z
     e30:	71 81       	ldd	r23, Z+1	; 0x01
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	0c 5f       	subi	r16, 0xFC	; 252
     e38:	1f 4f       	sbci	r17, 0xFF	; 255
     e3a:	06 c0       	rjmp	.+12     	; 0xe48 <vfprintf+0x280>
     e3c:	60 81       	ld	r22, Z
     e3e:	71 81       	ldd	r23, Z+1	; 0x01
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 5f       	subi	r16, 0xFE	; 254
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	a4 01       	movw	r20, r8
     e4a:	0e 94 fe 07 	call	0xffc	; 0xffc <__ultoa_invert>
     e4e:	a8 2e       	mov	r10, r24
     e50:	a8 18       	sub	r10, r8
     e52:	fb 2d       	mov	r31, r11
     e54:	ff 77       	andi	r31, 0x7F	; 127
     e56:	bf 2e       	mov	r11, r31
     e58:	b6 fe       	sbrs	r11, 6
     e5a:	0b c0       	rjmp	.+22     	; 0xe72 <vfprintf+0x2aa>
     e5c:	2b 2d       	mov	r18, r11
     e5e:	2e 7f       	andi	r18, 0xFE	; 254
     e60:	a5 14       	cp	r10, r5
     e62:	50 f4       	brcc	.+20     	; 0xe78 <vfprintf+0x2b0>
     e64:	b4 fe       	sbrs	r11, 4
     e66:	0a c0       	rjmp	.+20     	; 0xe7c <vfprintf+0x2b4>
     e68:	b2 fc       	sbrc	r11, 2
     e6a:	08 c0       	rjmp	.+16     	; 0xe7c <vfprintf+0x2b4>
     e6c:	2b 2d       	mov	r18, r11
     e6e:	2e 7e       	andi	r18, 0xEE	; 238
     e70:	05 c0       	rjmp	.+10     	; 0xe7c <vfprintf+0x2b4>
     e72:	7a 2c       	mov	r7, r10
     e74:	2b 2d       	mov	r18, r11
     e76:	03 c0       	rjmp	.+6      	; 0xe7e <vfprintf+0x2b6>
     e78:	7a 2c       	mov	r7, r10
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <vfprintf+0x2b6>
     e7c:	75 2c       	mov	r7, r5
     e7e:	24 ff       	sbrs	r18, 4
     e80:	0d c0       	rjmp	.+26     	; 0xe9c <vfprintf+0x2d4>
     e82:	fe 01       	movw	r30, r28
     e84:	ea 0d       	add	r30, r10
     e86:	f1 1d       	adc	r31, r1
     e88:	80 81       	ld	r24, Z
     e8a:	80 33       	cpi	r24, 0x30	; 48
     e8c:	11 f4       	brne	.+4      	; 0xe92 <vfprintf+0x2ca>
     e8e:	29 7e       	andi	r18, 0xE9	; 233
     e90:	09 c0       	rjmp	.+18     	; 0xea4 <vfprintf+0x2dc>
     e92:	22 ff       	sbrs	r18, 2
     e94:	06 c0       	rjmp	.+12     	; 0xea2 <vfprintf+0x2da>
     e96:	73 94       	inc	r7
     e98:	73 94       	inc	r7
     e9a:	04 c0       	rjmp	.+8      	; 0xea4 <vfprintf+0x2dc>
     e9c:	82 2f       	mov	r24, r18
     e9e:	86 78       	andi	r24, 0x86	; 134
     ea0:	09 f0       	breq	.+2      	; 0xea4 <vfprintf+0x2dc>
     ea2:	73 94       	inc	r7
     ea4:	23 fd       	sbrc	r18, 3
     ea6:	13 c0       	rjmp	.+38     	; 0xece <vfprintf+0x306>
     ea8:	20 ff       	sbrs	r18, 0
     eaa:	06 c0       	rjmp	.+12     	; 0xeb8 <vfprintf+0x2f0>
     eac:	5a 2c       	mov	r5, r10
     eae:	73 14       	cp	r7, r3
     eb0:	18 f4       	brcc	.+6      	; 0xeb8 <vfprintf+0x2f0>
     eb2:	53 0c       	add	r5, r3
     eb4:	57 18       	sub	r5, r7
     eb6:	73 2c       	mov	r7, r3
     eb8:	73 14       	cp	r7, r3
     eba:	68 f4       	brcc	.+26     	; 0xed6 <vfprintf+0x30e>
     ebc:	b7 01       	movw	r22, r14
     ebe:	80 e2       	ldi	r24, 0x20	; 32
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	2c 87       	std	Y+12, r18	; 0x0c
     ec4:	0e 94 cc 07 	call	0xf98	; 0xf98 <fputc>
     ec8:	73 94       	inc	r7
     eca:	2c 85       	ldd	r18, Y+12	; 0x0c
     ecc:	f5 cf       	rjmp	.-22     	; 0xeb8 <vfprintf+0x2f0>
     ece:	73 14       	cp	r7, r3
     ed0:	10 f4       	brcc	.+4      	; 0xed6 <vfprintf+0x30e>
     ed2:	37 18       	sub	r3, r7
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <vfprintf+0x310>
     ed6:	31 2c       	mov	r3, r1
     ed8:	24 ff       	sbrs	r18, 4
     eda:	12 c0       	rjmp	.+36     	; 0xf00 <vfprintf+0x338>
     edc:	b7 01       	movw	r22, r14
     ede:	80 e3       	ldi	r24, 0x30	; 48
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	2c 87       	std	Y+12, r18	; 0x0c
     ee4:	0e 94 cc 07 	call	0xf98	; 0xf98 <fputc>
     ee8:	2c 85       	ldd	r18, Y+12	; 0x0c
     eea:	22 ff       	sbrs	r18, 2
     eec:	17 c0       	rjmp	.+46     	; 0xf1c <vfprintf+0x354>
     eee:	21 ff       	sbrs	r18, 1
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <vfprintf+0x330>
     ef2:	88 e5       	ldi	r24, 0x58	; 88
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <vfprintf+0x334>
     ef8:	88 e7       	ldi	r24, 0x78	; 120
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	b7 01       	movw	r22, r14
     efe:	0c c0       	rjmp	.+24     	; 0xf18 <vfprintf+0x350>
     f00:	82 2f       	mov	r24, r18
     f02:	86 78       	andi	r24, 0x86	; 134
     f04:	59 f0       	breq	.+22     	; 0xf1c <vfprintf+0x354>
     f06:	21 fd       	sbrc	r18, 1
     f08:	02 c0       	rjmp	.+4      	; 0xf0e <vfprintf+0x346>
     f0a:	80 e2       	ldi	r24, 0x20	; 32
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <vfprintf+0x348>
     f0e:	8b e2       	ldi	r24, 0x2B	; 43
     f10:	27 fd       	sbrc	r18, 7
     f12:	8d e2       	ldi	r24, 0x2D	; 45
     f14:	b7 01       	movw	r22, r14
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 cc 07 	call	0xf98	; 0xf98 <fputc>
     f1c:	a5 14       	cp	r10, r5
     f1e:	38 f4       	brcc	.+14     	; 0xf2e <vfprintf+0x366>
     f20:	b7 01       	movw	r22, r14
     f22:	80 e3       	ldi	r24, 0x30	; 48
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 cc 07 	call	0xf98	; 0xf98 <fputc>
     f2a:	5a 94       	dec	r5
     f2c:	f7 cf       	rjmp	.-18     	; 0xf1c <vfprintf+0x354>
     f2e:	aa 94       	dec	r10
     f30:	f4 01       	movw	r30, r8
     f32:	ea 0d       	add	r30, r10
     f34:	f1 1d       	adc	r31, r1
     f36:	80 81       	ld	r24, Z
     f38:	b7 01       	movw	r22, r14
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 cc 07 	call	0xf98	; 0xf98 <fputc>
     f40:	a1 10       	cpse	r10, r1
     f42:	f5 cf       	rjmp	.-22     	; 0xf2e <vfprintf+0x366>
     f44:	33 20       	and	r3, r3
     f46:	09 f4       	brne	.+2      	; 0xf4a <vfprintf+0x382>
     f48:	51 ce       	rjmp	.-862    	; 0xbec <vfprintf+0x24>
     f4a:	b7 01       	movw	r22, r14
     f4c:	80 e2       	ldi	r24, 0x20	; 32
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 cc 07 	call	0xf98	; 0xf98 <fputc>
     f54:	3a 94       	dec	r3
     f56:	f6 cf       	rjmp	.-20     	; 0xf44 <vfprintf+0x37c>
     f58:	f7 01       	movw	r30, r14
     f5a:	86 81       	ldd	r24, Z+6	; 0x06
     f5c:	97 81       	ldd	r25, Z+7	; 0x07
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <vfprintf+0x39c>
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	9f ef       	ldi	r25, 0xFF	; 255
     f64:	2c 96       	adiw	r28, 0x0c	; 12
     f66:	e2 e1       	ldi	r30, 0x12	; 18
     f68:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__epilogue_restores__>

00000f6c <strnlen_P>:
     f6c:	fc 01       	movw	r30, r24
     f6e:	05 90       	lpm	r0, Z+
     f70:	61 50       	subi	r22, 0x01	; 1
     f72:	70 40       	sbci	r23, 0x00	; 0
     f74:	01 10       	cpse	r0, r1
     f76:	d8 f7       	brcc	.-10     	; 0xf6e <strnlen_P+0x2>
     f78:	80 95       	com	r24
     f7a:	90 95       	com	r25
     f7c:	8e 0f       	add	r24, r30
     f7e:	9f 1f       	adc	r25, r31
     f80:	08 95       	ret

00000f82 <strnlen>:
     f82:	fc 01       	movw	r30, r24
     f84:	61 50       	subi	r22, 0x01	; 1
     f86:	70 40       	sbci	r23, 0x00	; 0
     f88:	01 90       	ld	r0, Z+
     f8a:	01 10       	cpse	r0, r1
     f8c:	d8 f7       	brcc	.-10     	; 0xf84 <strnlen+0x2>
     f8e:	80 95       	com	r24
     f90:	90 95       	com	r25
     f92:	8e 0f       	add	r24, r30
     f94:	9f 1f       	adc	r25, r31
     f96:	08 95       	ret

00000f98 <fputc>:
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	18 2f       	mov	r17, r24
     fa2:	09 2f       	mov	r16, r25
     fa4:	eb 01       	movw	r28, r22
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	81 fd       	sbrc	r24, 1
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <fputc+0x1a>
     fac:	8f ef       	ldi	r24, 0xFF	; 255
     fae:	9f ef       	ldi	r25, 0xFF	; 255
     fb0:	20 c0       	rjmp	.+64     	; 0xff2 <fputc+0x5a>
     fb2:	82 ff       	sbrs	r24, 2
     fb4:	10 c0       	rjmp	.+32     	; 0xfd6 <fputc+0x3e>
     fb6:	4e 81       	ldd	r20, Y+6	; 0x06
     fb8:	5f 81       	ldd	r21, Y+7	; 0x07
     fba:	2c 81       	ldd	r18, Y+4	; 0x04
     fbc:	3d 81       	ldd	r19, Y+5	; 0x05
     fbe:	42 17       	cp	r20, r18
     fc0:	53 07       	cpc	r21, r19
     fc2:	7c f4       	brge	.+30     	; 0xfe2 <fputc+0x4a>
     fc4:	e8 81       	ld	r30, Y
     fc6:	f9 81       	ldd	r31, Y+1	; 0x01
     fc8:	9f 01       	movw	r18, r30
     fca:	2f 5f       	subi	r18, 0xFF	; 255
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	28 83       	st	Y, r18
     fd0:	39 83       	std	Y+1, r19	; 0x01
     fd2:	10 83       	st	Z, r17
     fd4:	06 c0       	rjmp	.+12     	; 0xfe2 <fputc+0x4a>
     fd6:	e8 85       	ldd	r30, Y+8	; 0x08
     fd8:	f9 85       	ldd	r31, Y+9	; 0x09
     fda:	81 2f       	mov	r24, r17
     fdc:	09 95       	icall
     fde:	89 2b       	or	r24, r25
     fe0:	29 f7       	brne	.-54     	; 0xfac <fputc+0x14>
     fe2:	2e 81       	ldd	r18, Y+6	; 0x06
     fe4:	3f 81       	ldd	r19, Y+7	; 0x07
     fe6:	2f 5f       	subi	r18, 0xFF	; 255
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255
     fea:	2e 83       	std	Y+6, r18	; 0x06
     fec:	3f 83       	std	Y+7, r19	; 0x07
     fee:	81 2f       	mov	r24, r17
     ff0:	90 2f       	mov	r25, r16
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	08 95       	ret

00000ffc <__ultoa_invert>:
     ffc:	fa 01       	movw	r30, r20
     ffe:	aa 27       	eor	r26, r26
    1000:	28 30       	cpi	r18, 0x08	; 8
    1002:	51 f1       	breq	.+84     	; 0x1058 <__ultoa_invert+0x5c>
    1004:	20 31       	cpi	r18, 0x10	; 16
    1006:	81 f1       	breq	.+96     	; 0x1068 <__ultoa_invert+0x6c>
    1008:	e8 94       	clt
    100a:	6f 93       	push	r22
    100c:	6e 7f       	andi	r22, 0xFE	; 254
    100e:	6e 5f       	subi	r22, 0xFE	; 254
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	8f 4f       	sbci	r24, 0xFF	; 255
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	af 4f       	sbci	r26, 0xFF	; 255
    1018:	b1 e0       	ldi	r27, 0x01	; 1
    101a:	3e d0       	rcall	.+124    	; 0x1098 <__ultoa_invert+0x9c>
    101c:	b4 e0       	ldi	r27, 0x04	; 4
    101e:	3c d0       	rcall	.+120    	; 0x1098 <__ultoa_invert+0x9c>
    1020:	67 0f       	add	r22, r23
    1022:	78 1f       	adc	r23, r24
    1024:	89 1f       	adc	r24, r25
    1026:	9a 1f       	adc	r25, r26
    1028:	a1 1d       	adc	r26, r1
    102a:	68 0f       	add	r22, r24
    102c:	79 1f       	adc	r23, r25
    102e:	8a 1f       	adc	r24, r26
    1030:	91 1d       	adc	r25, r1
    1032:	a1 1d       	adc	r26, r1
    1034:	6a 0f       	add	r22, r26
    1036:	71 1d       	adc	r23, r1
    1038:	81 1d       	adc	r24, r1
    103a:	91 1d       	adc	r25, r1
    103c:	a1 1d       	adc	r26, r1
    103e:	20 d0       	rcall	.+64     	; 0x1080 <__ultoa_invert+0x84>
    1040:	09 f4       	brne	.+2      	; 0x1044 <__ultoa_invert+0x48>
    1042:	68 94       	set
    1044:	3f 91       	pop	r19
    1046:	2a e0       	ldi	r18, 0x0A	; 10
    1048:	26 9f       	mul	r18, r22
    104a:	11 24       	eor	r1, r1
    104c:	30 19       	sub	r19, r0
    104e:	30 5d       	subi	r19, 0xD0	; 208
    1050:	31 93       	st	Z+, r19
    1052:	de f6       	brtc	.-74     	; 0x100a <__ultoa_invert+0xe>
    1054:	cf 01       	movw	r24, r30
    1056:	08 95       	ret
    1058:	46 2f       	mov	r20, r22
    105a:	47 70       	andi	r20, 0x07	; 7
    105c:	40 5d       	subi	r20, 0xD0	; 208
    105e:	41 93       	st	Z+, r20
    1060:	b3 e0       	ldi	r27, 0x03	; 3
    1062:	0f d0       	rcall	.+30     	; 0x1082 <__ultoa_invert+0x86>
    1064:	c9 f7       	brne	.-14     	; 0x1058 <__ultoa_invert+0x5c>
    1066:	f6 cf       	rjmp	.-20     	; 0x1054 <__ultoa_invert+0x58>
    1068:	46 2f       	mov	r20, r22
    106a:	4f 70       	andi	r20, 0x0F	; 15
    106c:	40 5d       	subi	r20, 0xD0	; 208
    106e:	4a 33       	cpi	r20, 0x3A	; 58
    1070:	18 f0       	brcs	.+6      	; 0x1078 <__ultoa_invert+0x7c>
    1072:	49 5d       	subi	r20, 0xD9	; 217
    1074:	31 fd       	sbrc	r19, 1
    1076:	40 52       	subi	r20, 0x20	; 32
    1078:	41 93       	st	Z+, r20
    107a:	02 d0       	rcall	.+4      	; 0x1080 <__ultoa_invert+0x84>
    107c:	a9 f7       	brne	.-22     	; 0x1068 <__ultoa_invert+0x6c>
    107e:	ea cf       	rjmp	.-44     	; 0x1054 <__ultoa_invert+0x58>
    1080:	b4 e0       	ldi	r27, 0x04	; 4
    1082:	a6 95       	lsr	r26
    1084:	97 95       	ror	r25
    1086:	87 95       	ror	r24
    1088:	77 95       	ror	r23
    108a:	67 95       	ror	r22
    108c:	ba 95       	dec	r27
    108e:	c9 f7       	brne	.-14     	; 0x1082 <__ultoa_invert+0x86>
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	61 05       	cpc	r22, r1
    1094:	71 05       	cpc	r23, r1
    1096:	08 95       	ret
    1098:	9b 01       	movw	r18, r22
    109a:	ac 01       	movw	r20, r24
    109c:	0a 2e       	mov	r0, r26
    109e:	06 94       	lsr	r0
    10a0:	57 95       	ror	r21
    10a2:	47 95       	ror	r20
    10a4:	37 95       	ror	r19
    10a6:	27 95       	ror	r18
    10a8:	ba 95       	dec	r27
    10aa:	c9 f7       	brne	.-14     	; 0x109e <__ultoa_invert+0xa2>
    10ac:	62 0f       	add	r22, r18
    10ae:	73 1f       	adc	r23, r19
    10b0:	84 1f       	adc	r24, r20
    10b2:	95 1f       	adc	r25, r21
    10b4:	a0 1d       	adc	r26, r0
    10b6:	08 95       	ret

000010b8 <__prologue_saves__>:
    10b8:	2f 92       	push	r2
    10ba:	3f 92       	push	r3
    10bc:	4f 92       	push	r4
    10be:	5f 92       	push	r5
    10c0:	6f 92       	push	r6
    10c2:	7f 92       	push	r7
    10c4:	8f 92       	push	r8
    10c6:	9f 92       	push	r9
    10c8:	af 92       	push	r10
    10ca:	bf 92       	push	r11
    10cc:	cf 92       	push	r12
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	0f 93       	push	r16
    10d6:	1f 93       	push	r17
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	ca 1b       	sub	r28, r26
    10e2:	db 0b       	sbc	r29, r27
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	09 94       	ijmp

000010ea <__epilogue_restores__>:
    10ea:	2a 88       	ldd	r2, Y+18	; 0x12
    10ec:	39 88       	ldd	r3, Y+17	; 0x11
    10ee:	48 88       	ldd	r4, Y+16	; 0x10
    10f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    10f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    10f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    10f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    10f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    10fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    10fc:	b9 84       	ldd	r11, Y+9	; 0x09
    10fe:	c8 84       	ldd	r12, Y+8	; 0x08
    1100:	df 80       	ldd	r13, Y+7	; 0x07
    1102:	ee 80       	ldd	r14, Y+6	; 0x06
    1104:	fd 80       	ldd	r15, Y+5	; 0x05
    1106:	0c 81       	ldd	r16, Y+4	; 0x04
    1108:	1b 81       	ldd	r17, Y+3	; 0x03
    110a:	aa 81       	ldd	r26, Y+2	; 0x02
    110c:	b9 81       	ldd	r27, Y+1	; 0x01
    110e:	ce 0f       	add	r28, r30
    1110:	d1 1d       	adc	r29, r1
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	ed 01       	movw	r28, r26
    1118:	08 95       	ret

0000111a <_exit>:
    111a:	f8 94       	cli

0000111c <__stop_program>:
    111c:	ff cf       	rjmp	.-2      	; 0x111c <__stop_program>
